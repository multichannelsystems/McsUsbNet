<?xml version="1.0"?>
<doc>
    <assembly>
        "McsUsbNet"
    </assembly>
    <members>
        <member name="M:Mcs.Usb.CPeristalticPumpDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CPeristalticPumpDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CPeristalticPumpDeviceNet">
            <summary>
    CPeristalticPumpDeviceNet is the class to control a Persistaltic Pump.
</summary>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStopTriggerSlope(System.Int32)">
            <summary>
queries stop condition of digital out stimulator
</summary>
            <param name="NrChannel">channel number</param>
            <returns>stop condition (rising or falling edge)</returns>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStopTriggerSlope(System.Int32,Mcs.Usb.DigOutStimulatorTriggerSlopeEnumNet)">
            <summary>
sets stop condition of digital out stimulator
</summary>
            <param name="NrChannel">channel number</param>
            <param name="Condition">stop condition (rising or falling edge)</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStartTriggerSlope(System.Int32)">
            <summary>
queries start condition of digital out stimulator
</summary>
            <param name="NrChannel">channel number</param>
            <returns>start condition (rising or falling edge)</returns>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStartTriggerSlope(System.Int32,Mcs.Usb.DigOutStimulatorTriggerSlopeEnumNet)">
            <summary>
sets start condition of digital out stimulator
</summary>
            <param name="NrChannel">channel number</param>
            <param name="Condition">start condition (rising or falling edge)</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStopTriggerSource(System.Int32,Mcs.Usb.W2100DigitalSourceEnumNet@,System.Int32@)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStopTriggerSource(System.Int32,Mcs.Usb.W2100DigitalSourceEnumNet,System.Int32)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStartTriggerSource(System.Int32,Mcs.Usb.W2100DigitalSourceEnumNet@,System.Int32@)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStartTriggerSource(System.Int32,Mcs.Usb.W2100DigitalSourceEnumNet,System.Int32)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStopTriggerSource(System.Int32,Mcs.Usb.DigitalSourceEnumNet@,System.Int32@)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStopTriggerSource(System.Int32,Mcs.Usb.DigitalSourceEnumNet,System.Int32)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetStartTriggerSource(System.Int32,Mcs.Usb.DigitalSourceEnumNet@,System.Int32@)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetStartTriggerSource(System.Int32,Mcs.Usb.DigitalSourceEnumNet,System.Int32)">
            <summary />
            <param name="NrChannel">channel number</param>
            <param name="Source">base register address</param>
            <param name="bitnumber_offset">address offset</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetGlobalRepeat(System.Int32)">
            <summary>
get repeat whole stimulation pattern
</summary>
            <param name="NrChannel">channel number</param>
            <returns>current value</returns>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.SetGlobalRepeat(System.Int32,System.Boolean)">
            <summary>
set repeat whole stimulation pattern
</summary>
            <param name="NrChannel">channel number</param>
            <param name="value">new value</param>
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.GetNumberOfChannels">
            <summary />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.AppendChannelData(System.Int32,Mcs.Usb.CStimulusFunctionNet.StimulusDeviceDataAndUnrolledData)">
            <summary />
            <param name="NrChannel" />
            <param name="device_data_and_unrolled" />
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.PrepareChannelData(System.Int32[],System.UInt64[])">
            <summary />
            <param name="Amplitude" />
            <param name="Duration" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.ClearChannel(System.Int32)">
            <summary>
clear stimulation pattern
</summary>
            <param name="NrChannel" />
        </member>
        <member name="M:Mcs.Usb.CDigOutStimulatorFunctionNet.#ctor(Mcs.Usb.CMcsUsbNet)">
            <summary>
    Initializes a new instance of the CDigOutStimulatorFunctionNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CDigOutStimulatorFunctionNet">
            <summary>
CDigOutStimulatorFunctionNet is the class of the DigOut stimulator function class.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.DacqDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CMcsUsbDacqNet" />. Use this to control the data aquisition.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.FluidControlDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CFluidControlDeviceNet" />. Use this to control the valves. Only SetSingleValve is implemented for <see cref="T:Mcs.Usb.CSafeISDeviceNet" />.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.RoboDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CRoboDeviceNet" />. Use this to control the syringe.
</summary>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacPeriode(System.UInt32)">
            <summary>
Sets the DAC periode.
</summary>
            <param name="periode">The periode in units of 10µs.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacPulseform(System.Int16[])">
            <summary>
Sets the DAC pulseform.
</summary>
            <param name="pulseform">The pulseform.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacMode(System.Byte)">
            <summary>
Sets the DAC mode.
</summary>
            <param name="mode">The mode: 0 = Impedance ; 1 = Amperometry</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetAdcSamplePos(System.UInt16[])">
            <summary>
Sets the sample position of the ADC.
</summary>
            <param name="positions">The positions in units of 0.1µs.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetAdcChannels(System.Byte)">
            <summary>
Sets the ADC channels you want to be sampled
</summary>
            <param name="channels">The bitmap of the 8 channels. Set bit to 1 for the channels you want measure</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetSwitches(System.UInt16)">
            <summary>
Sets the switches for all electrodes on the device. Do not use during measurement
</summary>
            <param name="switches">The switches: See Schematics for the meaning</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.Dispose">
            <summary>
Releases unmanaged resources and performs other cleanup operations before the
<see cref="T:Mcs.Usb.CSafeISDeviceNet" /> is reclaimed by garbage collection.
</summary>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Mcs.Usb.CSafeISDeviceNet" /> class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CSafeISDeviceNet">
            <summary />
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetCycle">
            <summary>
Gets the current cycle.
</summary>
            <returns>The cycle number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetOutputVoltage">
            <summary>
Gets the output voltage.
</summary>
            <returns>The output voltage in mV.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetMaxVoltage">
            <summary>
Gets the upper voltage level
</summary>
            <returns>The upper voltage level in mV.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetMinVoltage">
            <summary>
Gets the lower voltage level.
</summary>
            <returns>The lower voltage level in mV.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetCycles">
            <summary>
Gets the number of cycles.
</summary>
            <returns>The number of cycles to run for.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.GetSlope">
            <summary>
Gets the voltage slope.
</summary>
            <returns>The voltage slope in mV/s.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.IsRunning">
            <summary>
Gets if the MEA Clean device is running.
</summary>
            <returns>"true" when a run is in progress, otherwise "false".</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.SetMaxVoltage(System.Int32)">
            <summary>
Sets the upper voltage level.
</summary>
            <param name="voltageMax">The upper voltage level in mV (-1.6 .. 1.6 V).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.SetMinVoltage(System.Int32)">
            <summary>
Sets the lower voltage level.
</summary>
            <param name="voltageMin">The lower voltage level in mV (-1.6 .. 1.6 V).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.SetCycles(System.UInt32)">
            <summary>
Sets the number of cycles.
</summary>
            <param name="cycles">The number of cycles to run for (0 .. 99).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.SetSlope(System.UInt32)">
            <summary>
Sets the voltage slope.
</summary>
            <param name="voltageSlope">The voltage slope in mV/s (range 0 .. 60 V/s).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.Stop">
            <summary>
Stops a MEA Clean run.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.Start">
            <summary>
Starts a MEA Clean run.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaCleanDeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CMeaCleanDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMeaCleanDeviceNet">
            <summary>
CMeaCleanDeviceNet is the class to access the MEA Clean device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CLIH3DeviceNet.GetSampleInterval">
            <summary>
Gets the Sample Interval for the DACQ and Stimulation
</summary>
            <returns>Sample Interval configured on the device</returns>
        </member>
        <member name="M:Mcs.Usb.CLIH3DeviceNet.SetSampleInterval(System.UInt32)">
            <summary>
Sets the Sample Interval for the DACQ and Stimulation
</summary>
            <param name="SampleInterval">Sample Interval between the samples, Sample interval is available from 1 to 4194303</param>
        </member>
        <member name="M:Mcs.Usb.CLIH3DeviceNet.GetEEpromByte(System.UInt32)">
            <summary>
Reads one EEprom byte from the EPC10 bus
</summary>
            <param name="epc10bus">The EPC10 bus number</param>
            <returns>The byte read from the EEprom</returns>
        </member>
        <member name="M:Mcs.Usb.CLIH3DeviceNet.DummyCommand(System.UInt32)">
            <summary>
Dummy command to show how to use the DLL.
</summary>
            <param name="dummyParameter">parameter to send to the device</param>
        </member>
        <member name="M:Mcs.Usb.CLIH3DeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CLIH3DeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CLIH3DeviceNet">
            <summary>
CLIH3DeviceNet is the class to access the HEKA LIH3 device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetThermocoupleNanovoltPerKelvin(System.UInt32,System.UInt32)">
            <summary>
 Sets the proportional constant for the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <param name="value">Proportinal constant in Nanovolt per Kelvin.</param>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetThermocoupleNanovoltPerKelvin(System.UInt32)">
            <summary>
 Gets the proportional constant for the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The proportional constant in Nanovolt per Kelvin.</returns>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetMaxP(System.UInt32)">
            <summary>
Gets the maximum heater power of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetD(System.UInt32)">
            <summary>
Gets the D-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetI(System.UInt32)">
            <summary>
Gets the I-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetP(System.UInt32)">
            <summary>
Gets the P-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetOnOff(System.UInt32)">
            <summary>
Gets if the specified channel is on or off.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetSetpoint(System.UInt32)">
            <summary>
Gets the target temperate of specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetMaxP(System.UInt32,System.Int32)">
            <summary>
Sets the maximum heater power of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetD(System.UInt32,System.Int32)">
            <summary>
Sets the D-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetI(System.UInt32,System.Int32)">
            <summary>
Sets the I-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetP(System.UInt32,System.Int32)">
            <summary>
Sets the P-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetOnOff(System.UInt32,System.Int32)">
            <summary>
Switches the specified channel on or off.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetSetpoint(System.UInt32,System.Int32)">
            <summary>
Sets the target temperate of specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetBoardTemp">
            <summary>
Gets the temperate of the mainboard in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHasThermocouple">
            <summary>
Gets weather the device supports a thermocouple.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetMaxHeaterPowerMultiwell(System.Double)">
            <summary>
sets the max. heater power that the Multiwell temperature controller will apply; unit: W; useful range: 5.2W..7.6W
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetMaxHeaterPowerMultiwell">
            <summary>
queries the max. heater power that the Multiwell temperature controller will apply; unit: W; useful range: 5.2W..7.6W
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHeaterLimit(System.UInt32)">
            <summary>
Gets the temperate limit of the specified heater in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHeaterTemp(System.UInt32)">
            <summary>
Gets the temperate of the specified heater in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetValueHires(System.UInt32)">
            <summary>
Gets the temperate of the specified channel in units of 0.01°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetValue(System.UInt32)">
            <summary>
Gets the temperate of the specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetNumMeasureChannels">
            <summary>
Gets the number of channels the device can measure.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetNumControlChannels">
            <summary>
Gets the number of channels the device can control/regulate.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.#ctor">
            <summary>
Initializes a new instance of CTcxDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CTcxDeviceNet">
            <summary>
Class to control a Temperature Controller (TCX)
</summary>
        </member>
        <member name="M:Mcs.Usb.CExternDTesterDeviceNet.Write2(System.String)">
            <summary>
Reads the config string from the device.
</summary>
            <param name="configString">The config string.</param>
        </member>
        <member name="M:Mcs.Usb.CExternDTesterDeviceNet.Write(System.Byte[])">
            <summary>
Reads the config string from the device.
</summary>
            <param name="configString">The config string.</param>
        </member>
        <member name="M:Mcs.Usb.CExternDTesterDeviceNet.Read2">
            <summary>
Reads the config string from the device.
</summary>
            <returns>The config string.</returns>
        </member>
        <member name="M:Mcs.Usb.CExternDTesterDeviceNet.Read(System.Int32)">
            <summary>
Reads the config string from the device.
</summary>
            <param name="configString_Length" />
            <returns>The config string.</returns>
        </member>
        <member name="M:Mcs.Usb.CExternDTesterDeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CExternDTesterDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CExternDTesterDeviceNet">
            <summary>
CExternDTesterDeviceNet is the class to access the ExternD Tester (Handheld Device Tester D)
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChargingPCoefficient">
            <summary>
gets the pCoefficient for charging in mA/V / nominal charging current
</summary>
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.SetChargingPCoefficient(System.UInt32)">
            <summary>
sets the pCoefficient for charging in mA/V / nominal charging current
</summary>
            <param name="pCoefficient" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.ChannelReset(System.UInt32)">
            <summary>
cancel charging and capacity test functions; check if battery is connected
</summary>
            <param name="NrChannel" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.CapacityTest(System.UInt32)">
            <summary>
start capacity test on channel
</summary>
            <param name="NrChannel" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChannelState(System.UInt32)">
            <summary>
gets the channel state: IdleNoBattery, IdleChargeFinished, CapacityTestPreCharge, CapacityTestDischarge, StorageCharge, LowCurrentCharge, HighCurrentCharge
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChargingMode(System.UInt32)">
            <summary>
gets the charging mode: StorageCharge, LowCurrentCharge and HighCurrentCharge
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.SetChargingMode(System.UInt32,Mcs.Usb.MbcChargingModeEnumNet)">
            <summary>
sets the charging mode: StorageCharge, LowCurrentCharge and HighCurrentCharge
</summary>
            <param name="NrChannel" />
            <param name="NewOperatingMode" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChannels">
            <summary>
gets number of channels
</summary>
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetBatteryVoltage(System.UInt32)">
            <summary>
gets the battery voltage; unit: mV
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChargeCapacity(System.UInt32)">
            <summary>
gets the charge capacity; unit: ?Ah
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetDischargeCapacity(System.UInt32)">
            <summary>
gets the discharge capacity; unit: ?Ah
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetFinalDischargeVoltage(System.UInt32)">
            <summary>
gets the final discharge voltage; unit: mV
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.SetFinalDischargeVoltage(System.UInt32,System.UInt32)">
            <summary>
sets the final discharge voltage; unit: mV
</summary>
            <param name="NrChannel" />
            <param name="FinalDischargeVoltage_mV" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetDischargeCurrentSetPoint(System.UInt32)">
            <summary>
gets the setpoint for the discharge current; unit: mA
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.SetDischargeCurrentSetPoint(System.UInt32,System.UInt32)">
            <summary>
sets the setpoint for the discharge current; unit: mA
</summary>
            <param name="NrChannel" />
            <param name="DischargeCurrent_mA" />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetDischargeCurrent(System.UInt32)">
            <summary>
gets the discharge current; unit: mA
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.GetChargeCurrent(System.UInt32)">
            <summary>
gets the charge current; unit: mA
</summary>
            <param name="NrChannel" />
            <returns />
        </member>
        <member name="M:Mcs.Usb.CMultiBatteryChargerDeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CMultiBatteryChargerDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMultiBatteryChargerDeviceNet">
            <summary>
CMultiBatteryChargerDeviceNet is the class to access the MBC-08 device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CGilsonDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CGilsonDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CGilsonDeviceNet">
            <summary>
    CGilsonDeviceNet is the class to control a Gilson device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetDigitalIn(System.UInt16)">
            <summary>
Reads the digital input state
</summary>
            <param name="channel">The Channel Number</param>
            <returns>The Digital State</returns>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetAnalogVoltage(System.UInt16)">
            <summary>
Reads the current analog voltage
</summary>
            <param name="channel">The Channel Number</param>
            <returns>The Analog Voltage</returns>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetSupplyVoltage">
            <summary>
Reads the current supply voltage in mV
</summary>
            <returns>The supply voltage</returns>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.SetPressureRange(System.UInt16,System.Int32,System.Int32)">
            <summary>
Get the pressure range that is used between the analog voltage or the digital states
</summary>
            <param name="channel">The Channel Number</param>
            <param name="lower_pressure">The lower border of the pressure range</param>
            <param name="upper_pressure">The upper border of the pressure range</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetPressureRange(System.UInt16,System.Int32@,System.Int32@)">
            <summary>
Get the pressure range that is used between the analog voltage or the digital states
</summary>
            <param name="channel">The Channel Number</param>
            <param name="lower_pressure">The lower border of the pressure range</param>
            <param name="upper_pressure">The upper border of the pressure range</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.SetAnalogVoltageRange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
Writes the Analog Input Voltage Range
</summary>
            <param name="channel">The Channel Number</param>
            <param name="min_voltage">The voltage that should be seen as the minimum voltage</param>
            <param name="max_voltage">The voltage that should be seen as the maximum voltage</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetAnalogVoltageRange(System.UInt16,System.UInt16@,System.UInt16@)">
            <summary>
Reads the Analog Input Voltage Range
</summary>
            <param name="channel">The Channel Number</param>
            <param name="min_voltage">The voltage that should be seen as the minimum voltage</param>
            <param name="max_voltage">The voltage that should be seen as the maximum voltage</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.SetPumpModeType(System.UInt16,Mcs.Usb.PP_Pump_Mode_Type_EnumNet)">
            <summary>
Writes the config string from the device.
</summary>
            <param name="channel">The Channel Number</param>
            <param name="PumpMode">The Pump Mode Type.</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetPumpModeType(System.UInt16)">
            <summary>
Reads the Pump Mode Type.
</summary>
            <param name="channel">The Channel Number</param>
            <returns>The Pump Mode Type.</returns>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.SetPumpSpeedUnit(System.UInt16,System.Int32)">
            <summary>
Writes the Pump Speed Unit
</summary>
            <param name="channel">The Channel Number</param>
            <param name="SpeedUnit">The Speed Unit</param>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.GetPumpSpeedUnit(System.UInt16)">
            <summary>
Reads the Pump Speed Unit
</summary>
            <param name="channel">The Channel Number</param>
            <returns>The Speed Unit</returns>
        </member>
        <member name="M:Mcs.Usb.CPPCFunctionNet.#ctor(Mcs.Usb.CMcsUsbNet)">
            <summary>
    Initializes a new instance of the CPPCFunctionNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CPPCFunctionNet">
            <summary>
CPPCFunctionNet is the class to access the PPC (high precision Patch Peristalic patch Pump
</summary>
        </member>
        <member name="T:Mcs.Usb.CPatchServerDeviceNet">
            <summary>
CPatchServerDeviceNet is the class to control the MCS PatchServer device
</summary>
        </member>
        <member name="T:Mcs.Usb.CFYIDeviceNet">
            <summary>
CFYIDeviceNet is the class to control the MCS FYI device
</summary>
        </member>
        <member name="T:Mcs.Usb.CMeasureTableDeviceNet">
            <summary>
CMeasureTableDeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CPPSDeviceNet">
            <summary>
CPPS4plus1DeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CHLADeviceNet">
            <summary>
CHLADeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CEncapsulatorDeviceNet">
            <summary>
CEncapsulatorDeviceNet is the to control the MCS HiClamp device
</summary>
        </member>
        <member name="T:Mcs.Usb.CHiClampDeviceNet">
            <summary>
CHiClampDeviceNet is the to control the MCS HiClamp device
</summary>
        </member>
        <member name="T:Mcs.Usb.CRoboInjectDeviceNet">
            <summary>
CRoboInjectDeviceNet is the to control the MCS RoboInject device
</summary>
        </member>
        <member name="T:Mcs.Usb.CRoboocyte2DeviceNet">
            <summary>
CRoboocyte2DeviceNet is the class to control the MCS Roboocyte2 device
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetCurrentPosition(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32@,System.Int32@)">
            <summary>
Gets the current position of motors
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="x"> Current position of first axis if pattern in axes is set </param>
            <param name="y"> Current position of second axis if pattern in axes is set </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.StopMovement(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">
            <summary>
Stops the current movement
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.MoveAbs(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32,System.Int32,System.Int32)">
            <summary>
Moves the motor to the new absolute position
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="x"> Position of first axis, if pattern in axes is set </param>
            <param name="y"> Position of second axis if pattern in axes is set </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.FindReference(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">
            <summary>
Searches the reference position of the motor
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetMovementError">
            <summary>
Low level command, gets the error of the last movement end
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetInMovement">
            <summary>
Low level command, gets the internal state "In Movement"
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.SetInMovement">
            <summary>
Low level command, sets the internal state to "In Movement" 
</summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_I">
            <summary> Bit pattern for i axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_Z">
            <summary> Bit pattern for z axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_Y">
            <summary> Bit pattern for y axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_X">
            <summary> Bit pattern for x axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_I">
            <summary> Axis number of i for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_Z">
            <summary> Axis number of z for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_Y">
            <summary> Axis number of y for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_X">
            <summary> Axis number of x for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.McsBus_ZI">
            <summary> McsBus address for the z and i axes </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.McsBus_XY">
            <summary> McsBus address for the xy-plane </summary>
        </member>
        <member name="T:Mcs.Usb.CRoboDeviceNet">
            <summary>
CRoboDeviceNet is the base class for all Robo platform based devices
</summary>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleNanovoltPerKelvin(System.UInt32)">
            <summary>
 Reads the proportional constant for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The proportional constant in Nanovolt per Kelvin.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleCalibration(System.UInt32)">
            <summary>
 Gets the calibration constant for the Thermocouple ADC.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The calibration constant for the Thermocouple ADC.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetReferenceTemperature(System.UInt32)">
            <summary>
 Reads the reference temperature for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The temperature from the Thermocouple in 1/100 °C.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleTemperature(System.UInt32)">
            <summary>
Reads the temperature from Thermocouple. The functions gives the temperature difference
between both Thermocouple junctions. To get the absolute temperature, add the reference
temperature.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The temperature difference between both Thermocouple junctions in 1/100 °C.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetDigin">
            <summary>
 Reads the digital input.
</summary>
            <returns>The bit pattern of the state of the digital inputs.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetAdc(System.UInt32)">
            <summary>
 Reads an ADC Value.
</summary>
            <param name="channel">The ADC channel number to query.</param>
            <returns>The current ADC value.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetPWM(System.UInt32)">
            <summary>
 Gets the state of the PWM output.
</summary>
            <returns>The current state of the PWM outputs duty cycle in permille.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetDigout">
            <summary>
 Gets the state of the digital output.
</summary>
            <returns>The current state of the digital outputs as a bit pattern.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetSingleValve(System.UInt16)">
            <summary>
Gets the state of a valve.
</summary>
            <param name="valve">number of valve</param>
            <returns>state of the valve</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetValve">
            <summary>
 Gets the state of the valves.
</summary>
            <returns>The current state of the valves as a bit pattern.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetThermocoupleNanovoltPerKelvin(System.UInt32,System.UInt32)">
            <summary>
 Sets the proportinal constant for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <param name="value">proportinal constant for the Thermocouple in Nanovolt per Kelvin.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.CalibrateThermocouple(System.UInt32)">
            <summary>
Calibrates the ADC which is used for the Thermocouple. For the calibration,
Short circuit the Thermocouple and use this function to correct a possible offset of the ADC which measures the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetPWM(System.UInt32,System.UInt32)">
            <summary>
 Sets the duty cycle of the PWM output.
</summary>
            <param name="channel">PWM channel number.</param>
            <param name="value">duty cycle of the PWM output in permille.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetDigout(System.UInt32)">
            <summary>
 Define the pattern on the Digital Output.
</summary>
            <param name="value">bit pattern on the digital output.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetSingleValve(System.UInt16,System.UInt16)">
            <summary>
  Opens or Closes a valve.
</summary>
            <param name="valve">number of valve to be changed.</param>
            <param name="onoff">open or close the valve.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetValve(System.UInt32)">
            <summary>
  Open or Close valves.
</summary>
            <param name="value">bit pattern of valves which should be open.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.Dispose">
            <summary>
    Default destructor.
</summary>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CFluidControlDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CFluidControlDeviceNet">
            <summary>
    CFluidControlDeviceNet is the class to control MCS FluidControl (FCB and FCX) device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetCurrentResolutionInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Resolution of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Resolution of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetCurrentRangeInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Range of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Range of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetVoltageResolutionInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Resolution of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Resolution of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetVoltageRangeInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Range of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Range of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetTimeResolutionInNanoSeconds">
            <summary>
Gets number of bits of the DAC resolution.
</summary>
            <returns>The time resolution in ns.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.GetDACResolution">
            <summary>
Gets number of bits of the DAC resolution.
</summary>
            <returns>The DAC resolution in bits.</returns>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.ClearChannelData(System.Int32)">
            <summary>
Delete a Stimulus Pattern from STG memory
</summary>
            <param name="channel"> specifies the channel to clear.</param>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.SendStop(System.UInt32)">
            <summary>
Stop some or all triggers of the STG.
</summary>
            <param name="triggermap">A bitmap of triggers which will be stopped.</param>
        </member>
        <member name="M:Mcs.Usb.CW2100_StimulatorFunctionNet.SendStart(System.UInt32)">
            <summary>
Start (Trigger) the STG.
The startup delay is in the range of a few ms.
</summary>
            <param name="triggermap">A bitmap of triggers which will be started.</param>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.SetModeSelect(Mcs.Usb.PulseGenerator_Mode_EnumNet,System.Int32)">
            <summary>
Writes the generator mode
</summary>
            <param name="mode">The generator mode</param>
            <param name="digitalchannel">The digital in channel used as gate</param>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.GetModeSelect(Mcs.Usb.PulseGenerator_Mode_EnumNet@,System.Int32@)">
            <summary>
Reads the generator mode
</summary>
            <param name="mode">The generator mode</param>
            <param name="digitalchannel">The digital in channel used as gate</param>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.SetPulseLength(System.Int32)">
            <summary>
Writes the generator pulse length
</summary>
            <param name="pulselength_in_10us">The pulse length</param>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.GetPulseLength">
            <summary>
Reads the generator pulse length
</summary>
            <returns>The pulse length</returns>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.SetPeriod(System.Int32)">
            <summary>
Writes the generator period
</summary>
            <param name="period_in_samples">The period</param>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.GetPeriod">
            <summary>
Reads the generator period
</summary>
            <returns>The period</returns>
        </member>
        <member name="M:Mcs.Usb.CPulseGeneratorFunctionNet.#ctor(Mcs.Usb.CMcsUsbNet)">
            <summary>
    Initializes a new instance of the CPulseGeneratorFunctionNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CPulseGeneratorFunctionNet">
            <summary>
CPulseGeneratorFunctionNet is the class to control the pulse generator for video tracking
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.getPlateMux">
            <summary>
Gets the selected quarter of the electrodes on a high density Multiwell plate
</summary>
            <returns>the selected quarter</returns>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.SetPlateMux(System.UInt32)">
            <summary>
Selects a one quarter of the electrodes on a high density Multiwell plate
</summary>
            <param name="muxSelection">the selected quarter</param>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.GetPlateType">
            <summary>
Gets the plate type
</summary>
            <returns>the plate type</returns>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.UnlockPlateClamp">
            <summary>
Unlocks the plate clamp
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.LockPlateClamp">
            <summary>
Locks the plate clamp
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.GetPlateClampLockState">
            <summary>
Gets the state of the plate clamp lock
</summary>
            <returns>the state of the plate lock (unlocked/locked)</returns>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.StopPlateClamp">
            <summary>
Stops the plate clamp movement
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.ClosePlateClamp">
            <summary>
Closes the plate clamp
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.OpenPlateClamp">
            <summary>
Opens the plate clamp
</summary>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.GetPlateClampState">
            <summary>
Gets the state of the Multiwell plate clamp
</summary>
            <returns>the state of the plate clamp (open/closed)</returns>
        </member>
        <member name="M:Mcs.Usb.CMultiwellDeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CMultiwellDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMultiwellDeviceNet">
            <summary>
CMultiwellDeviceNet is the class to access the HEKA LIH3 device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet,System.Boolean)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
            <param name="listEntry">Device to use for the connection.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
            <param name="listEntry">Device to use for the connection.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet,Mcs.Usb.OnUpdateFirmwareStatusChange,Mcs.Usb.OnUpdateFirmwareProgress,System.Boolean)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.LoadUserFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet)">
            <summary>
  Send the DSP Firmware to the MEA21 device.
</summary>
            <param name="FirmwareFile">Filename of the DSP Firmware (*.bin) file.</param>
            <param name="listEntry">Device to use for the connection. See CMcsUsbListNet.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.GetFirmwareVersionFromFile(System.String,System.UInt32@)">
            <summary>
Retrives version info from a Firmware update file.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.StopLoop">
            <summary>
Stops the streaming mode.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.StartLoop">
            <summary>
Starts the streaming mode.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetSyncoutQueueSpace(System.UInt32)">
            <summary>
Queries the space availabe in the PC memory for a given syncout channel.
</summary>
            <param name="channel">The channel number to query.</param>
            <returns>Returns number of data points for which there is space.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.EnqueueSyncout(System.UInt32,System.UInt16[])">
            <summary>
Sends syncout data to the STG for a given channel.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="data">A pointer to the data.</param>
            <returns>Returns 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetDataQueueSpace(System.UInt32)">
            <summary>
Queries the space availabe in the PC memory for a given data channel.
</summary>
            <param name="channel">The channel number to query.</param>
            <returns>Returns number of data points for which there is space.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.EnqueueData(System.UInt32,System.Int16[])">
            <summary>
Sends data to the STG for a given channel.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="data">A pointer to the data.</param>
            <returns>Returns the number of enqueued bytes.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetCapacity(System.UInt32[]@)">
            <summary>
Queries the memory layout for the streaming mode of the STG.
<para>
In streaming mode, each trigger can be given an individual amount of memory space
as needed by the application.
</para></summary>
            <param name="dwTriggerCapacity">A list of memory sizes in bytes, one with entry for each trigger.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.SetCapacity(System.UInt32[])">
            <summary>
Configures the memory layout for the streaming mode of the STG.
<para>
In streaming mode, each trigger can be given an individual amount of memory space
as needed by the application.
Make sure the sum does not exceed the total memory available.
</para></summary>
            <param name="dwTriggerCapacity">A list of memory sizes in bytes, one with entry for each trigger.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetTrigger(System.UInt32[]@,System.UInt32[]@,System.UInt32[]@,System.UInt32[]@)">
            <summary>
Queries the trigger settings for the STG.
</summary>
            <param name="channelmap">For each trigger, a bitmap of channels which belong to this trigger.</param>
            <param name="syncoutmap">For each trigger, a bitmap of syncout which belong to this trigger.</param>
            <param name="digoutmap">For each trigger, a bitmap of digout which belong to this trigger.</param>
            <param name="autostart">For each trigger, define whether this trigger should autostart.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.SetupTrigger(System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[])">
            <summary>
Configures the trigger settings for the STG. 
</summary>
            <param name="channelmap">For each trigger, a bitmap of channels which belong to this trigger.</param>
            <param name="syncoutmap">For each trigger, a bitmap of syncout which belong to this trigger</param>
            <param name="digoutmap">For each trigger, a bitmap of digout which belong to this trigger.</param>
            <param name="autostart">For each trigger, define whether this trigger should autostart.</param>
            <param name="callback_threshold">The callback_threshold for each trigger, when the data handler should be called in precent of the buffer level.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetCurrentRate(System.UInt32)">
            <summary>
Queries the rate at which frames are currently sent to the STG.
</summary>
            <param name="trigger">The trigger number to query.</param>
            <returns>Returns the rate at which frames are sent in frames 1/8 ms times 2^14.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetFramesBuffered(System.UInt32)">
            <summary>
Queries the number of frames currently buffered in STG Memory.
</summary>
            <param name="trigger">The trigger number to query.</param>
            <returns>Returns the number of frames currently buffered in STG memory.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.GetFramesDone">
            <summary>
Queries the number of frames sent to the STG.
</summary>
            <returns>Returns the number of frames already sent to the STG.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.DisableContinousMode">
            <summary>
Disable the continous mode of the STG.
<para>
Defines how the STG handles buffer underruns.
If continous mode is switched off, the triggers are stopped 
automatically when a buffer runs empty.
</para></summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.EnableContinousMode">
            <summary>
Enable the continous mode of the STG.
<para>
Defines how the STG handles buffer underruns.
If continous mode is switched off, the triggers are stopped 
automatically when a buffer runs empty.
</para></summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.#ctor(System.UInt32,Mcs.Usb.OnStg200xDataHandler,Mcs.Usb.OnStg200xErrorHandler)">
            <summary>
Constructor.
</summary>
            <param name="ringbuffer_size">The ringbuffer_size size of the ringbuffer in PC memory.</param>
            <param name="dataHandler">The data Handler callback.</param>
            <param name="errorHandler">The error Handler callback.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xStreamingNet.#ctor(System.UInt32)">
            <summary>
Constructor.
</summary>
            <param name="ringbuffer_size">The ringbuffer_size size of the ringbuffer in PC memory.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.EnableMultiFileMode(System.UInt32)">
            <summary>
Enable the Multi-File mode of the STG.
<para>
In Multi-File mode, the trigger inputs switch between segments.
To use this mode, define four segments (number 0 to 3) and
fill each segment with a stimulus pattern.
</para><para>
Now a trigger on trigger input 1 switches the STG to the first 
segment and starts all triggers in this segment.
Likewise, a trigger on trigger input 2, 3 and 4 selects
the respective segment and start all triggers in this segment
So the Multi-File Mode can be used to predefine up to four
different stimuli which can be selected without the
need for a computer connection.
</para></summary>
            <param name="submode">The submode.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.SendSegmentSelect(System.UInt32,System.UInt32)">
            <summary>
Switchs segment.
</summary>
            <param name="segment">The number of the segment to select.</param>
            <param name="segmentflags">A bitmap of flags, bit 1: assign all channels to the trigger number equal to the segment.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.SendSegmentStart(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Switchs segment and starts trigger.
</summary>
            <param name="triggermap">A bitmap of triggers that will be started.</param>
            <param name="segment">The number of the segment to select.</param>
            <param name="segmentflags">A bitmap of flags, bit 1: assign all channels to the trigger number equal to the segment.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.SendSegmentDefine(System.UInt32[])">
            <summary>
Defines the segment memory layout of the STG.
<para>
On reset, the STG has one segment containing all available memory.
</para><para>
 With this command, the STG memory can be devided into several segments.
 Each segment can be filled with stimulus data.
</para></summary>
            <param name="segment_list">The List of memory sizes (one per segment).</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.PrepareAndAppendData(System.UInt32,System.Int32[],System.UInt64[],Mcs.Usb.STG_DestinationEnumNet)">
            <summary>
Prepare and append data to a given channel on the STG.

<para>
Each datapoint is 
represented by an signed 32bit integer value.
When using voltage stimulation, the values are in multiple of 1 uV, thus the possible range is += 2000 V.
When using current stimulation, the values are in multiple of 1 nA, this the possible range is += 2000 mA.
</para>

The duration is given as a list of 64 bit integers. Durations
are given in units of µs. The STG has a resolution of 20 µs.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="Amplitude">A list of datapoints as int32.</param>
            <param name="Duration">A list of durations as uint64. The time is given in units of µs.</param>
            <param name="dest_type">specifies wheather the data is for syncout, current or voltage stimulation.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.PrepareAndSendData(System.UInt32,System.Int32[],System.UInt64[],Mcs.Usb.STG_DestinationEnumNet)">
            <summary>
Prepare and send data to a given channel on the STG. Previous data sent to that channel is erased first.

<para>
Each datapoint is 
represented by an signed 32bit integer value.
When using voltage stimulation, the values are in multiple of 1 uV, thus the possible range is += 2000 V.
When using current stimulation, the values are in multiple of 1 nA, this the possible range is += 2000 mA.
</para>

The duration is given as a list of 64 bit integers. Durations
are given in units of µs. The STG has a resolution of 20 µs.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="Amplitude">A list of datapoints as int32.</param>
            <param name="Duration">A list of durations as uint64. The time is given in units of µs.</param>
            <param name="dest_type">specifies wheather the data is for syncout, current or voltage stimulation.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.#ctor(Mcs.Usb.OnStg200xPollStatus)">
            <summary>
Use this constructor if you want to use the status callback
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadBasicNet.GetTrigger(System.UInt32[]@,System.UInt32[]@,System.UInt32[]@)">
            <summary>
Queries the trigger settings for the STG. Note that all memory segments have their own trigger setting.
</summary>
            <param name="channelmap">For each trigger, a bitmap of channels that belong to this trigger.</param>
            <param name="syncoutmap">For each trigger, a bitmap of syncouts that belong to this trigger.</param>
            <param name="repeat">For each trigger, define the number of times this trigger should be repeated.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadBasicNet.SetupTrigger(System.UInt32,System.UInt32[],System.UInt32[],System.UInt32[])">
            <summary>
Configures the trigger settings for the STG. Note that all memory segments have their own trigger setting.
</summary>
            <param name="first_trigger">The number of the first trigger to change.</param>
            <param name="channelmap">For each trigger, a bitmap of channels that belong to this trigger.</param>
            <param name="syncoutmap">For each trigger, a bitmap of syncouts that belong to this trigger.</param>
            <param name="repeat">For each trigger, define the number of times this trigger should be repeated.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetDacAmplificationFactor(System.UInt32)">
            <summary>
Get the amplification factor for a DAC.
</summary>
            <param name="DacNumber">The number of the DAC.</param>
            <returns>the amplifcation factor for the DAC queried, range is from -1.99999 to +1.99999.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetDacAmplificationFactor(System.UInt32,System.Double)">
            <summary>
Set the amplification factor for a DAC.
</summary>
            <param name="DacNumber">The number of the DAC.</param>
            <param name="Factor">the amplifcation factor for that DAC, range is from -1.99999 to +1.99999.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetEnableAmplifierProtectionSwitch(System.UInt32)">
            <summary>
Gets whether the Amplifier Protection Switch is openend while stimulation is in progress.
</summary>
            <param name="electrode">The electrode number.</param>
            <returns>true if the switch is to be opened, false if it is closed while stimulation is in progress.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetEnableAmplifierProtectionSwitch(System.UInt32,System.Boolean)">
            <summary>
Defines whether the Amplifier Protection Switch is openend while stimulation is in progress.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="enable">True if the switch is to be opened, false if it is to remain closed while stimulation is in progress.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetBlankingEnable(System.UInt32)">
            <summary>
Gets whether an electrode should be blanked while stimulation is in progress.
</summary>
            <param name="electrode">The electrode number.</param>
            <returns>true if blanking is enabled while stimulation is in progress.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetBlankingEnable(System.UInt32,System.Boolean)">
            <summary>
Defines whether an electrode should be blanked while stimulation is in progress.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="enable">True if the switch is to be opened, false if it is to remain closed while stimulation is in progress.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeEnable(System.UInt32,System.UInt32)">
            <summary>
Gets weather an electrode is enabled or disabled for stimulation.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="index">The index for listmode.</param>
            <returns>true if the electrode is enabled, false if it is disabled.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeEnable(System.UInt32,System.UInt32,System.Boolean[])">
            <summary>
Enables or disables the stimulation switch for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="index">The index for listmode.</param>
            <param name="enable">1 to enable the electrode, 0 to disable.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeDacMux(System.UInt32,System.UInt32)">
            <summary>
Gets the DAC which is used for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="index">The index for listmode.</param>
            <returns>The DAC in use, can be 1, 2 or 3. If the electrode is grounded 0 is returned.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeDacMux(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
Defines the DAC to use for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="dac">The DAC to use, can be 1, 2 or 3. To ground an electrode, use 0.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeMode(System.UInt32)">
            <summary>
Gets the mode an electrode is in.
</summary>
            <param name="electrode">The electrode number.</param>
            <returns>0 for automatic and 3 for manual mode.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeMode(System.UInt32,Mcs.Usb.ElectrodeModeEnumNet[])">
            <summary>
Puts an electrode in either automatic or manual mode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="mode">0 for automatic and 3 for manual mode.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetMeasurementMode(System.UInt32)">
            <summary>
Sets a channel to measurement mode (STG3008-FA).
</summary>
            <param name="channel">The channel to change.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetCurrentMode">
            <summary>
Sets all channels to current mode (STG3008-FA and STG400x only).
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetVoltageMode">
            <summary>
Sets all channels to voltage mode (STG3008-FA and STG400x only).
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetCurrentMode(System.UInt32)">
            <summary>
Sets a channel to current mode (STG3008-FA and STG400x only).
</summary>
            <param name="channel">The channel to change.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetVoltageMode(System.UInt32)">
            <summary>
Sets a channel to voltage mode (STG3008-FA and STG400x only).
</summary>
            <param name="channel">The channel to change.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetNumberOfHWDACPaths">
            <summary>
Gets the Number of HW Stimulation DACs of the device.
</summary>
            <returns>The number of independent HW Stimulation outputs.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetNumberOfTriggerInputs">
            <summary>
Gets the Number of trigger inputs of the device.
</summary>
            <returns>The number of trigger inputs.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetNumberOfSyncoutChannels">
            <summary>
Gets the Number of available syncout channels of the device.
</summary>
            <returns>The number of analog channels.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetNumberOfAnalogChannels">
            <summary>
Gets the Number of available analog channels of the device.
</summary>
            <returns>The number of analog channels.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetTotalMemory">
            <summary>
Gets the total amount of memory available on the STG (all segments).
</summary>
            <returns>The total memory available on the STG in bytes.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetMemory">
            <summary>
Gets the amount of memory available in the currently selected segment of the STG.
</summary>
            <returns>The memory available in the currently selected segment in bytes.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetCurrentResolutionInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Resolution of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Resolution of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetCurrentRangeInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Range of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Range of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetVoltageResolutionInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Resolution of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Resolution of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetVoltageRangeInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Range of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Range of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetDACResolution">
            <summary>
Gets number of bits of the DAC resolution.
</summary>
            <returns>The DAC resolution in bits.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetAnalogResolution(System.Int32,System.Int32@,System.Int32@)">
            <summary>
Gets the resolution of the analog outputs.
</summary>
            <param name="channel">The channel which is queried.</param>
            <param name="URes">The Voltage resolution in mV.</param>
            <param name="IRes">The Current resolution in uA.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetAnalogRanges(System.Int32,System.Int32@,System.Int32@)">
            <summary>
Gets the range of the analog outputs.
</summary>
            <param name="channel">The channel which is queried.</param>
            <param name="URange">The Voltage range in mV.</param>
            <param name="IRange">The Current range in uA.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetStgVersionInfo(System.String@,System.String@)">
            <summary>
Queries software and hardware version.
</summary>
            <param name="SwVersion">The current Software Version of the STG.</param>
            <param name="HwVersion">The Hardware Revision of the STG.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SendStop(System.UInt32,System.Int32)">
            <summary>
Stop some or all triggers of the STG.
</summary>
            <param name="triggermap">A bitmap of triggers which will be stopped.</param>
            <param name="options">bitmap of options, currently only STOP_OPTION_SAVESTOP (0x80) is defined, which bypasses the stop commands when a syncout assossiated with a given sync-out has bit 1 (0x02) set. Can be used e.g. to  prevent a stop while a biphasic stimulation pulse is active..</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SendStop(System.UInt32)">
            <summary>
Stop some or all triggers of the STG.
</summary>
            <param name="triggermap">A bitmap of triggers which will be stopped.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SendStart(System.UInt32)">
            <summary>
Start (Trigger) the STG.
The startup delay is in the range of a few ms.
</summary>
            <param name="triggermap">A bitmap of triggers which will be started.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetOutputRate">
            <summary>
Queries the output rate of the STG.
Valid rates are from 1000 Hz to 50000 Hz.
</summary>
            <returns>Returns the current output rate in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetOutputRate(System.UInt32)">
            <summary>
Change the output rate of the STG.
Valid rates are from 1000 Hz to 50000 Hz.
</summary>
            <param name="rate">The new output rate in Hz.</param>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.Dispose">
            <summary>
The destructor.
</summary>
        </member>
        <member name="T:Mcs.Usb.CStg200xBasicNet">
            <summary>
    CStg200xBasicNet is the base class to control MCS STG device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetIntBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type int from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUIntBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned int from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetShortBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type short from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUShortBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned short from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetByteBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type char from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUByteBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned char from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetIntBuffer(System.UInt16,System.UInt16,System.Int32[])">
            <summary>
Sends an array of type int to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUIntBuffer(System.UInt16,System.UInt16,System.UInt32[])">
            <summary>
Sends an array of unsigned int to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetShortBuffer(System.UInt16,System.UInt16,System.Int16[])">
            <summary>
Sends an array of type short to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUShortBuffer(System.UInt16,System.UInt16,System.UInt16[])">
            <summary>
Sends an array of type unsigned short to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetByteBuffer(System.UInt16,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte[])">
            <summary>
Sends an array of type char to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUByteBuffer(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
Sends an array of type unsigned char to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetValue(System.UInt16,System.UInt16)">
            <summary>
Sets .
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CGenericDevelopDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CGenericDevelopDeviceNet">
            <summary>
    CGenericDevelopDeviceNet is the class to use during development of a new device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetCurrentCycle">
            <summary>
Gets the current cycle.
</summary>
            <returns>The cycle number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetCycles">
            <summary>
Gets the number of cycles.
</summary>
            <returns>The number of cycles to run for.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetCycles(System.UInt32)">
            <summary>
Sets the number of cycles.
</summary>
            <param name="cycles">The number of cycles to run for (0 .. 99).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetTimeInPause">
            <summary>
Gets the time in the pause.
</summary>
            <returns>The time in the pause in ms.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetPauseDuration">
            <summary>
Gets the duration of the pause between MEA Coat pulses.
</summary>
            <returns>The duration in ms.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetPauseDuration(System.UInt32)">
            <summary>
Sets the duration of the pause between MEA Coat pulses.
</summary>
            <param name="pauseDuration">The duration in ms (range 0 .. 65 s).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetTimeInPlateau">
            <summary>
Gets the time in the plateau.
</summary>
            <returns>The time in the plateau in ms.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetOutputCurrent">
            <summary>
Gets the output current.
</summary>
            <returns>The output current in pA.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetOffsetCurrent">
            <summary>
Gets the offset of the current.
</summary>
            <returns>The offset of the current in pA.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetMaxCurrent">
            <summary>
Gets the limit of the current ramp (absolute value).
</summary>
            <returns>The limit of the current ramp in pA (absolute value).</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetDuration">
            <summary>
Gets the duration of a MEA Coat run.
</summary>
            <returns>The duration in ms.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.GetSlope">
            <summary>
Gets the current slope.
</summary>
            <returns>The current slope in pA/s.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.IsRunning">
            <summary>
Gets if the MEA Clean device is running.
</summary>
            <returns>"true" when a run is in progress, otherwise "false".</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetOffsetCurrent(System.Int32)">
            <summary>
Sets the offset of the current.
</summary>
            <param name="currentOffset">The offset of the current in pA (-10 .. 10 nA).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetMaxCurrent(System.UInt32)">
            <summary>
Sets the limit of the current ramp (absolute value).
</summary>
            <param name="currentMax">The limit of the current ramp in pA (absolute value, 0 .. 18 nA).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetDuration(System.UInt32)">
            <summary>
Sets the duration of a MEA Coat run.
</summary>
            <param name="duration">The duration in ms (range 0 .. 65 s).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.SetSlope(System.Int32)">
            <summary>
Sets the current slope.
</summary>
            <param name="currentSlope">The current slope in pA/s (range -65 .. 65 nA/s).</param>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.Stop">
            <summary>
Stops a MEA Coat run.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.Start">
            <summary>
Starts a MEA Coat run.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaCoatDeviceNet.#ctor">
            <summary>
    Initializes a new instance of the CMeaCoatDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMeaCoatDeviceNet">
            <summary>
CMeaCoatDeviceNet is the class to access the MEA Coat device.
</summary>
        </member>
        <member name="M:CMeaUSBDevice.CHWInfo_MeaUSBDevice.GetAvailableSampleRateByIndex(System.Int32)">
            <summary>
Get the real number of data bits.
</summary>
            <remarks>
This value may be different from the value returned by GetDataFormat, e.g. in MC_Card the data are shifted 2 bits
so the real number is 14 while the data format is 16 bits
</remarks>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetMemory">
            <summary>
Get the amount of memory available in the currently selected segment of the STG.
</summary>
            <returns>The total memory available on the STG in bytes.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetTotalMemory">
            <summary>
Get the total amount of memory available on the STG (all segments).
</summary>
            <returns>The total memory available on the STG in bytes.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SetupTrigger(System.UInt32,System.UInt32[],System.UInt32[],System.UInt32[])">
            <summary>
Configures the trigger settings for the STG. Note that all memory segments have their own trigger setting.
</summary>
            <param name="first_trigger">The number of the first trigger to change.</param>
            <param name="channelmap">For each trigger, a bitmap of channels that belong to this trigger.</param>
            <param name="syncoutmap">For each trigger, a bitmap of syncouts that belong to this trigger.</param>
            <param name="repeat">For each trigger, define the number of times this trigger should be repeated.</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetCurrentResolutionInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Resolution of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Resolution of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetCurrentRangeInNanoAmp(System.UInt32)">
            <summary>
Gets the Current Range of the specified channel in Nanoamps.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Current Range of the specified channel in Nanoamps.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetVoltageResolutionInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Resolution of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Resolution of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetVoltageRangeInMicroVolt(System.UInt32)">
            <summary>
Gets the Voltage Range of the specified channel in Microvolts.
</summary>
            <param name="channel"> Channel which is queried.</param>
            <returns>The Voltage Range of the specified channel in Microvolts.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.GetDACResolution">
            <summary>
Gets number of bits of the DAC resolution.
</summary>
            <returns>The DAC resolution in bits.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.CreateSideband(System.Int32[],System.Int32[],System.UInt64[],System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Creates the Sideband Channel for the MEA2100 device.

<para>
Each datapoint is 
represented by an signed 32bit integer value.
A value 0 means that the stimulation is active during that time.
A value 1 means that the stimulation is not active during that time.
</para>

The duration is given as a list of 64 bit integers. Durations
are given in units of µs. The STG has a resolution of 20 µs.
</summary>
            <param name="StimulusActive">A list of datapoints which define weather the Stimulus is active or idle at that time as int32.</param>
            <param name="Duration">A list of durations as uint64. The time is given in units of µs.</param>
            <param name="Bit0Time">Time in µs for which Bit 0 (Blanking) is to be extended.</param>
            <param name="Bit3Time">Time in µs for which Bit 3 (Stimulus Enable) is to be extended.</param>
            <param name="Bit4Time">Time in µs for which Bit 4 (Stimulus Selector) is to be extended.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.PrepareAndAppendData(System.UInt32,System.Int32[],System.UInt64[],Mcs.Usb.STG_DestinationEnumNet)">
            <summary>
Prepare and append data to a given channel on the STG.

<para>
Each datapoint is 
represented by an signed 32bit integer value.
When using voltage stimulation, the values are in multiple of 1 uV, thus the possible range is += 2000 V.
When using current stimulation, the values are in multiple of 1 nA, this the possible range is += 2000 mA.
</para>

The duration is given as a list of 64 bit integers. Durations
are given in units of µs. The STG has a resolution of 20 µs.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="Amplitude">A list of datapoints as int32.</param>
            <param name="Duration">A list of durations as uint64. The time is given in units of µs.</param>
            <param name="dest_type">specifies wheather the data is for syncout, current or voltage stimulation.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.PrepareAndSendData(System.UInt32,System.Int32[],System.UInt64[],Mcs.Usb.STG_DestinationEnumNet)">
            <summary>
Prepare and send data to a given channel on the STG. Previous data sent to that channel is erased first.

<para>
Each datapoint is 
represented by an signed 32bit integer value.
When using voltage stimulation, the values are in multiple of 1 uV, thus the possible range is += 2000 V.
When using current stimulation, the values are in multiple of 1 nA, this the possible range is += 2000 mA.
</para>

The duration is given as a list of 64 bit integers. Durations
are given in units of µs. The STG has a resolution of 20 µs.
</summary>
            <param name="channel">The channel number to send data to.</param>
            <param name="Amplitude">A list of datapoints as int32.</param>
            <param name="Duration">A list of durations as uint64. The time is given in units of µs.</param>
            <param name="dest_type">specifies wheather the data is for syncout, current or voltage stimulation.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.ClearSyncData(System.Int32)">
            <summary>
Delete a Syncout Pattern from STG memory
</summary>
            <param name="channel"> specifies the channel to clear.</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.ClearChannelData(System.Int32)">
            <summary>
Delete a Stimulus Pattern from STG memory
</summary>
            <param name="channel"> specifies the channel to clear.</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SendStop(System.UInt32,System.Int32)">
            <summary>
Stop some or all triggers of the STG.
</summary>
            <param name="triggermap">A bitmap of triggers which will be stopped.</param>
            <param name="options">bitmap of options, currently only STOP_OPTION_SAVESTOP (0x80) is defined, which bypasses the stop commands when a syncout assossiated with a given sync-out has bit 1 (0x02) set. Can be used e.g. to  prevent a stop while a biphasic stimulation pulse is active..</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SendStop(System.UInt32)">
            <summary>
Stop some or all triggers of the STG.
</summary>
            <param name="triggermap">A bitmap of triggers which will be stopped.</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SendStart(System.UInt32)">
            <summary>
Start (Trigger) the STG.
The startup delay is in the range of a few ms.
</summary>
            <param name="triggermap">A bitmap of triggers which will be started.</param>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.ForceStatusEvent">
            <summary>
Force a status event.
Force the DLL to create a PollMessage event and to call the
pPollCallback function, even if no new status information is available.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.StopPoll">
            <summary>
Stops the interrupt fetching thread and delivers events
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.StartPoll">
            <summary>
Starts the interrupt fetching thread and delivers events
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SidebandData.Finalize">
            <summary>
Finalizer: called by GC before collecting
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.SidebandData.Dispose">
            <summary>
Destructor: called by Dispose()
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.StimulusDeviceDataAndUnrolledData.Finalize">
            <summary>
Finalizer: called by GC before collecting
</summary>
        </member>
        <member name="M:Mcs.Usb.CStimulusFunctionNet.StimulusDeviceDataAndUnrolledData.Dispose">
            <summary>
Destructor: called by Dispose()
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaUSBDeviceNet.#ctor">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaUSBDeviceNet.#ctor(Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="channelData">Handler to call when new data is available.</param>
            <param name="error">Handler to call when an error occurs.</param>
        </member>
        <member name="T:Mcs.Usb.CMeaUSBDeviceNet">
            <summary>
Class for data acquisition via ME and MEA USB amplifiers
</summary>
        </member>
        <member name="M:Mcs.Usb.CMC_CardDeviceNet.#ctor">
            <summary>
Initializes a new instance of CMC_CardDeviceNet class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMC_CardDeviceNet.#ctor(Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMC_CardDeviceNet class.
</summary>
            <param name="channelData">Handler to call when new data is available.</param>
            <param name="error">Handler to call when an error occurs.</param>
        </member>
        <member name="T:Mcs.Usb.CMC_CardDeviceNet">
            <summary>
Class for data acquisition via MC_Card
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetTriggerMaskValue(System.UInt32,System.UInt32,System.Int32)">
            <summary>
Defines a pattern on the digital dataword which will start a trigger when found.
</summary>
            <param name="mask">Bits in the digital dataword which are monitored for a match with value.</param>
            <param name="value">Pattern which must match for the trigger to start.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetTriggerPeriod(System.Int32,System.Int32)">
            <summary>
Sets the maximum number of samples per trigger.
</summary>
            <param name="samples">Number of samples to acquire after the trigger condition is met.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[]@,System.UInt32)">
            <summary>
Gets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which contains the electrode (channel) and amplification on return.</param>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[]@)">
            <summary>
Gets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which contains the electrode (channel) and amplification on return.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[],System.UInt32)">
            <summary>
Sets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which defines the electrode (channel) and amplification.</param>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[])">
            <summary>
Sets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which defines the electrode (channel) and amplification.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetNumberOfAudioChannels">
            <summary>
Gets the number of available audio channels.
</summary>
            <returns>The number of audio channels available, 0 when there are none.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetNumberOfAnalogChannels(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Sets the number of analog channels in the datastream for the MEA2100 device.
</summary>
            <param name="NumberOfChannels_HS1">Number of analog channels from the Headstage 1.</param>
            <param name="NumberOfChannels_HS2">Number of analog channels from the Headstage 2.</param>
            <param name="NumberOfChannels_DSP">Number of data words from the DSP.</param>
            <param name="NumberOfChannels_IF">Number of analog channels from the Interfaceboard.</param>
            <param name="VirtualDevice">VirtualDevice to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetNumberOfChannels(System.Int32)">
            <summary>
Sets the number of analog channels in the datastream.
</summary>
            <param name="NumberOfChannels">Number of analog channels.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetDigitalData(System.UInt32@)">
            <summary>
Generate a value on the digital output.
</summary>
            <param name="digital_value">Value on the digital data register.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetDigitalData(System.UInt32,System.Boolean)">
            <summary>
Generate a value on the digital output.
</summary>
            <param name="bit_number">Bit number to change.</param>
            <param name="value">Bit value.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetDigitalData(System.UInt32,System.UInt32)">
            <summary>
Generate a value on the digital output.
</summary>
            <param name="digital_value">Value to set.</param>
            <param name="digital_value_mask">Mask for change.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetDigitalOut(System.UInt32,System.Int32,System.Int32)">
            <summary>
Generate a pulse on the digital output.
</summary>
            <param name="digout_value">Bitmask to set on the digital out.</param>
            <param name="pulselength">Pulselength in ms.</param>
            <param name="counter_index">Counter to use for MEA2100.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableChecksum(System.Boolean,System.Int32)">
            <summary>
Enable the checksum data word in the datastream. The checksum is a 32 bit counter and 2x16 bit magic numbers.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableTimestamp(System.Boolean,System.Int32)">
            <summary>
Enable the timestamp data word in the datastream. The timestamp is a 64 bit counter.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableDigitalIn(System.Boolean,System.Int32)">
            <summary>
Enable the digital data word in the datastream.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="P:Mcs.Usb.CMeaDeviceNet.AnalogGain">
            <summary>
The gain of the analog inputs of the device. Value is gain times 1000, a value of 1000 corresponds to a gain of 1.0.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetAnalogGain">
            <summary>
Gets the gain of the analog inputs of the device.
</summary>
            <returns>Gain times 1000, a value of 1000 corresponds to a gain of 1.0.</returns>
        </member>
        <member name="P:Mcs.Usb.CMeaDeviceNet.Gain">
            <summary>
The amplifier gain of the device. Value is gain times 1000, a value of 1000 corresponds to a gain of 1.0.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetGain">
            <summary>
Gets the amplifier gain of the device.
</summary>
            <returns>Gain times 1000, a value of 1000 corresponds to a gain of 1.0.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.#ctor(Mcs.Usb.McsBusTypeEnumNet,Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
            <param name="channelData">Callback to call when new data is available.</param>
            <param name="error">Callback to call when an error occurred.</param>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.#ctor(Mcs.Usb.McsBusTypeEnumNet)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
        </member>
        <member name="T:Mcs.Usb.CMeaDeviceNet">
            <summary>
Base class for MEA data acquisition devices.
</summary>
            <remarks>
There are two different device types for MEA data aquistion devices. There are the USB-MEA devices
and the MC_Card. In .NET both classes can be accessed by the contructor of the base class CMeaDeviceNet,
which contructs the correct underlying C++ class for the USB-MEA device on the one hand or the MC_Card device 
on the other hand.
Through this interface both device types USB-MEA devices and MC_Card devices can be accessed
</remarks>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="queue">Handle of the queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of data from the device.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.IsDigitalChannelDedicated">
            <summary>
Query if the digital channel replaces an analog channel when enabled (e.g. on MC_Card) or adds a channel link on USB devices.
</summary>
            <returns>false when the digital channel replaces an analog channel when enabled, true when the digital channels is appended to the analog channels when enabled.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.GetNumberOfHWDigitalChannels(System.Int32@)">
            <summary>
Get the number of digital channels the device supports.
</summary>
            <param name="numberOfChannels">Number of digital channels the device supports.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.GetNumberOfHWADCChannels(System.Int32@)">
            <summary>
Get the number of analog channels the device supports.
</summary>
            <param name="numberOfChannels">Number of analog channels the device supports.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbDacqNet.CHWInfo">
            <summary>
Class to provide hardware information about the device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetGroupChannelDataI32(Mcs.Usb.DacqGroupChannelEnumNet,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="group">Group selector supported by the device.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetGroupChannelDataUI32(Mcs.Usb.DacqGroupChannelEnumNet,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="group">Group selector supported by the device.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetGroupChannelDataI16(Mcs.Usb.DacqGroupChannelEnumNet,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="group">Group selector supported by the device.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetGroupChannelDataUI16(Mcs.Usb.DacqGroupChannelEnumNet,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="group">Group selector supported by the device.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="queue">Number of the sub queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="queue">Number of the sub queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="queue">Number of the sub queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="queue">Number of the sub queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int16[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.UInt16[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of data from the device.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_AvailFrames(System.Int32)">
            <summary>
Get the number of sample frames already available in the FIFO.
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <returns>Number of sample frames available in the FIFO.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannelsQueue(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannelsQueue(System.Int32,System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.AddSelectedChannelsQueue(System.Int32,System.Boolean[],System.Int32,System.Int32,Mcs.Usb.SampleSizeNet)">
            <summary>
Adds a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nOffset">Number of channel to start with (counted in samplesize bytes).</param>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <returns>The handle to the Queue.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.AddSelectedChannelsQueue(System.Int32,System.Int32,System.Int32,System.Int32,Mcs.Usb.SampleSizeNet)">
            <summary>
Adds a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nOffset">Number of channel to start with (counted in samplesize bytes).</param>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <returns>The handle to the Queue.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedData(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Use handle = 0 in the ChannelBlock_ReadFrames... functions.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedData(System.Int32,System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Use handle = 0 in the ChannelBlock_ReadFrames... functions.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannels(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a FIFO queue per channel. Each channel will have its own FIFO and Callback function.
</summary>
            <remarks>
When using a 32bit sample size, the number obtained from GetChannelsInBlock must be devided by 2 to be used here,
since GetChannelsInBlock returns the number of 16 bit datapoints per sample frame, while this functions uses
the number of sample frames in its own data format.
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannels(System.Int32,System.Int32,System.Int32,Mcs.Usb.SampleSizeNet,System.Int32)">
            <summary>
Create a FIFO queue per channel. Each channel will have its own FIFO and Callback function.
</summary>
            <remarks>
When using a 32bit sample size, the number obtained from GetChannelsInBlock must be devided by 2 to be used here,
since GetChannelsInBlock returns the number of 16 bit datapoints per sample frame, while this functions uses
the number of sample frames in its own data format.
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of samples frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StopDacq(System.UInt32)">
            <summary>
Stop the data acquisition thread and sampling.
</summary>
            <param name="VirtualDevice">Virtual Device to start.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StopDacq">
            <summary>
Stop the data acquisition thread and sampling.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Start the data acquisition thread and sampling.
</summary>
            <param name="numSubmittedUsbBuffers">Number of USB Buffers that are simultaniously submitted.</param>
            <param name="timeout">Timeout in ms.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
            <param name="packetsInUrb">Packets in each URB.</param>
            <param name="VirtualDevice">Virtual Device to start.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Start the data acquisition thread and sampling.
</summary>
            <param name="timeout">Timeout in ms.</param>
            <param name="numSubmittedUsbBuffers">Number of USB Buffers that are simultaniously submitted.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
            <param name="packetsInUrb">Packets in each URB.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.Int32)">
            <summary>
Start the data acquisition thread and sampling.
</summary>
            <param name="timeout">Timeout in ms.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq">
            <summary>
Start the data acquisition thread and sampling.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartLoop(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="numSubmittedUsbBuffers">Number of USB Buffers that are simultaniously submitted.</param>
            <param name="timeout">Timeout in ms.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
            <param name="packetsInUrb">Packets in each URB.</param>
            <param name="VirtualDevice">Virtual Device to start.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartLoop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="timeout">Timeout in ms.</param>
            <param name="numSubmittedUsbBuffers">Number of USB Buffers that are simultaniously submitted.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
            <param name="packetsInUrb">Packets in each URB.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartLoop(System.Int32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="timeout">Timeout in ms.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartLoop">
            <summary>
Start the data acquisition thread.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStop(System.Int32,System.Int32,System.Int32)">
            <summary>
Stop sampling.
</summary>
            <param name="trigger_map" />
            <param name="options" />
            <param name="VirtualDacqMap" />
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStop(System.Int32,System.Int32)">
            <summary>
Stop sampling.
</summary>
            <param name="trigger_map" />
            <param name="options" />
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStop(System.Int32)">
            <summary>
Stop sampling.
</summary>
            <param name="trigger_map" />
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStop">
            <summary>
Stop sampling.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStart(System.Int32,System.Int32)">
            <summary>
Start sampling.
</summary>
            <param name="trigger_map" />
            <param name="VirtualDacqMap" />
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SendStart">
            <summary>
Start sampling.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetChannelsInBlock">
            <summary>
Get the number of 16 bit datawords which will be collected per sample frame, use after the device is configured.
</summary>
            <returns>Number of 16 bit datawords per sample frame.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetMinSamplingFrequencyStepsize">
            <summary>
Gets the minimal sampling frequency step size increment value of the device.
</summary>
            <returns>Sampling frequency step size in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetMaxSamplingFrequency">
            <summary>
Gets the maximal sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.set_SampleRate(System.Int32)">
            <summary>
Sets the sampling frequency of the device.
</summary>
            <param name="rate">Sampling frequency in Hz.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.get_SampleRate">
            <summary>
Gets the sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbDacqNet.SampleRate">
            <summary>
The sampling frequency of the device in Hz.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetSampleRate(System.Int32)">
            <summary>
Gets the sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSampleRate(System.Int32,System.UInt32,System.Int32)">
            <summary>
Sets the sampling frequency of the device.
</summary>
            <param name="rate">Sampling frequency in Hz.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetNumberOfDataBits(System.UInt32,Mcs.Usb.DacqGroupChannelEnumNet,System.Int32@)">
            <summary>
Get the real number of data bits.
</summary>
            <remarks>
This value may be different from the value returned by GetDataFormat, e.g. in MC_Card the data are shifted 2 bits
so the real number is 14 while the data format is 16 bits
</remarks>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetAdcDataFormat">
            <summary>
Gets the ADC data format, 16 means 16 bits, 24 means 24 bits, 32 means 32 bits.
</summary>
            <returns>The data format in bits.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetMeaLayout">
            <summary>
Gets the MEA layout which is connected to the MEA2100 device.
</summary>
            <returns>MeaLayoutEnumNet which enumerates the MEA types.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetAdapterType">
            <summary>
Gets the adapter which is connected to the MEA2100 device.
</summary>
            <returns>AdapterTypeEnumNet which enumerates the possible adapters.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetDataMode(System.UInt32)">
            <summary>
Gets the data mode, can be 16, 24 or 32bit, all signed or unsigned on the MEA2100 device.
</summary>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>DataModeEnumNet which enumerates the possible data modes.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetDataMode(Mcs.Usb.DataModeEnumNet,System.UInt32)">
            <summary>
Sets the data mode, can be 16, 24 or 32bit, all signed or unsigned on the MEA2100 device.
</summary>
            <param name="dataMode">DataModeEnumNet enumerates the possible data modes.</param>
            <param name="virtualDevice">Virtual device to use.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetVoltageRangeInMilliVolt">
            <summary>
Gets the currently selected voltage range on devices which support multiple voltage ranges.
</summary>
            <returns>The rounded Voltage Range in mV.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetVoltageRangeInMicroVolt">
            <summary>
Gets the currently selected voltage range on devices which support multiple voltage ranges.
</summary>
            <returns>The Voltage Range in uV.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetVoltageRangeInMicroVolt(System.Int32,System.UInt32)">
            <summary>
Sets the voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="voltageRange">Voltage Range to use in µV.</param>
            <remarks>This replaces SetVoltageRange, where the value of the range was in mV!</remarks>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetVoltageRangeByIndex(System.Int32,System.UInt32)">
            <summary>
Sets the voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="voltageRangeIndex">Voltage Range to use as index, smaller values are larger voltage ranges.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetStatusOfLastCommand">
            <summary>
  Gets the status of the last call to the McsUsb Library.
</summary>
            <returns>The Error Status of the last McsUsb command. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.EnableExceptions(System.Boolean)">
            <summary>
  Enables or Disables Exceptions for calls to McsUsb Devices. If Exceptions are disabled, the return value of a command can
  be queries with the GetStatusOfLastCommand call instead.
</summary>
            <param name="enable">True to enable Exceptions, False to disable.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceRootHubName">
            <summary>
  Gets the Name of the USB root hub the device is connected to.
</summary>
            <returns>The Name of the USB root hub as it is shown in the device manager.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceRootHubVendorName">
            <summary>
  Gets the Vendor Name of the USB root hub the device is connected to.
</summary>
            <returns>The PCI Vendor Name, either "Intel", "Renesas", "ASMedia" or "unknown".</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceRootHubVendorEnum">
            <summary>
  Gets the Vendor ID of the USB root hub the device is connected to.
</summary>
            <returns>An enum which enumerates the PCI Vendor ID.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceRootHubVendorID">
            <summary>
  Gets the Vendor ID of the USB root hub the device is connected to.
</summary>
            <returns>The PCI Vendor ID, 0x8086 for Intel, 0x1912 for Renesas, 0x1b21 for ASMedia.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetErrorText(System.UInt32)">
            <summary>
  Gets the error text string that belongs to a status number.
</summary>
            <param name="Status">The status number you want the text for.</param>
            <returns>The error text string that belongs to the status number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetFirmwareVersion(Mcs.Usb.CFirmwareDestinationNet)">
            <summary>
 Gets the firmware version for the destination.
</summary>
            <param name="destination">The destination to be queried.</param>
            <returns>The firmware version as a 32 bit number, the upper 16 bit contain the majaor version number, the lower 16 bit the minor version number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceSpeed">
            <summary>
  Query the Connection Speed of the device.
</summary>
            <returns>0 for Low-Speed, 1 for Full-Speed, 2 for High-Speed and 3 for SuperSpeed.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetMea21UsbPort">
            <summary>
Gets the USB port if an IFB that is used by this connection
</summary>
            <returns>number of used port; range: 0..1</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.MultibootGetSelectedImage">
            <summary>
  Gets sector index of selected FPGA boot image on IFB
</summary>
            <returns>Sector index of image; range: 0..2</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.MultibootGetImageId(System.UInt32)">
            <summary>
  Query the multiboot image id of the device located in specified sector (range: 0..2) of IFB FPGA.
</summary>
            <returns>The magic ident code of the image.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.MultibootSelectImage(System.UInt32)">
            <summary>
  Select the multiboot image specified by "sector" (range: 0..2) for IFB FPGA.
</summary>
            <returns>Throws exception on error.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetSerialNumber">
            <summary>
  Query the Serial Number of the device.
</summary>
            <returns>The Serial Number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Disconnect">
            <summary>
  Disconnect from a device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.IsConnected">
            <summary>
  Check if a device is Connected.
</summary>
            <returns>true if the device is connected.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(Mcs.Usb.CMcsUsbListEntryNet,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="entry">The Device List Entry for the device to be connected.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(Mcs.Usb.CMcsUsbListEntryNet)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="entry">The Device List Entry for the device to be connected.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.#ctor(Mcs.Usb.McsBusTypeEnumNet)">
            <summary>
Initializes a new instance of the base class to handle MCS USB devices.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.#ctor">
            <summary>
Initializes a new instance of the base class to handle MCS USB devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbNet">
            <summary>
Base class to handle MCS USB devices.
All device classes are derived from this class. Functionality that is provided by all MCS devices is handled by this class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetUsbListEntries">
            <summary>
Returns all entries from the list of USB Devices connected to the computer.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetUsbListEntry(System.UInt32)">
            <summary>
Returns one CMcsUsbListEntryNet from the list of USB Devices connected to the computer.
</summary>
            <param name="index">number of the entry to use.</param>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListNet.Count">
            <summary>
Gets the number of devices currently in the list.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetNumberOfDevices">
            <summary>
Gets the number of devices currently in the list.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.SetStringFormat(System.String)">
            <summary>
Specify the text the CMcsUsbListEntryNet.ToString() function should return. The 
special code %N expands to the device name and %S expands to the serial number of the device.
</summary>
            <param name="format">A String containing the format template. Default is "%N (%S)".</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Initialize(Mcs.Usb.DeviceIdNet[])">
            <summary>
Initialize/Update the list of devices which are currently connected to the computer.
</summary>
            <param name="DeviceIdList">Specifies a list of devices to look for.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Initialize(Mcs.Usb.DeviceEnumNet)">
            <summary>
Initialize/Update the list of devices which are currently connected to the computer.
</summary>
            <param name="McsUsbDevice">Specifies the type of devices to look for.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Finalize">
            <summary>
Finalizer: called by GC before collecting
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Dispose">
            <summary>
Destructor: called by Dispose()
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.#ctor(Mcs.Usb.OnDeviceArrivalRemoval,Mcs.Usb.OnDeviceArrivalRemoval)">
            <summary>
Initializes a new instance of CMcsUsbListNet class.
</summary>
            <param name="devArrival">Callback to call when a new device is attached to the bus.</param>
            <param name="devRemoval">Callback to call when a device is removed from the bus.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.#ctor">
            <summary>
Initializes a new instance of CMcsUsbListNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbListNet">
            <summary>
Class to handle a list of connected MCS USB devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.OnDeviceArrivalRemoval">
            <summary>
Delegate to show a device arrival or removal.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.SetStringFormat(System.String)">
            <summary>
Specify the text the CMcsUsbListEntryNet.ToString() function should return. The 
special code %N expands to the device name and %S expands to the serial number of the device.
</summary>
            <param name="format">A String containing the format template. Default is "%N (%S)".</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.Equals(System.Object)">
            <summary>
Checks weather two CMcsUsbListEntryNet represent the same USB device.
</summary>
            <param name="obj">The CMcsUsbListEntryNet to compare with.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.#ctor">
            <summary>
Initializes a new instance of the CMcsUsbListEntryNet class.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.DevicePath">
            <summary>
The DevicePath of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.HwVersion">
            <summary>
The hardware revision of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.SerialNumber">
            <summary>
The serial number of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.DeviceName">
            <summary>
The device name of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.Product">
            <summary>
The Product ID of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.Manufacturer">
            <summary>
The Manufacturer ID of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaBathModeEnumNet">
            <summary>
Enumerations of CMOS MEA Bath Mode
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaPacketFrameContextGroupEnumNet">
            <summary>
Enumerations of CMOS MEA HS STG Trigger Status Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaHS1TriggerStatusEnumNet">
            <summary>
Enumerations of CMOS MEA HS STG Trigger Status Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaHS1SidebandEnumNet">
            <summary>
Enumerations of CMOS MEA HS STG Sideband Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaIFDigChannelEnumNet">
            <summary>
Enumerations of CMOS MEA IF Digital Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaSTG1DACSignalEnumNet">
            <summary>
Enumerations of CMOS MEA DAC Stimulation Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaHeadstage1NChipTempEnumNet">
            <summary>
Enumerations of CMOS MEA HS Temperature Monitoring Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaHeadstage1NCCol2CurrentEnumNet">
            <summary>
Enumerations of CMOS MEA HS Current Monitoring Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaHeadstage1NCBathCurrentEnumNet">
            <summary>
Enumerations of CMOS MEA HS Current Monitoring Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaInterfaceADCEnumNet">
            <summary>
Enumerations of CMOS MEA IF Analog Channels Group Bitmask
</summary>
        </member>
        <member name="T:Mcs.Usb.CMOSMeaValueUnitEnumNet">
            <summary>
Enumerations of CMOS MEA Units of Values in Data stream
</summary>
        </member>
        <member name="T:Mcs.Usb.DacqMeaGroupTypeEnumNet">
            <summary>
Enumerations of CMOS MEA Groups to detect wether it is an Analog, Digital or Frame Context Group
</summary>
        </member>
        <member name="T:Mcs.Usb.DacqGroupChannelEnumNet">
            <summary>
Enumerates the CMOS MEA Channel Groups of Datastream
</summary>
        </member>
        <member name="T:Mcs.Usb.ElectrodeModeEnumNet">
            <summary>
Enumerates the mode of each electrode, can be automatic or manual. In automatic mode, the blanking of the electrode is controlled by the sideband signal, in manual mode, the stimulation configuration is independant of the sideband signal.
</summary>
        </member>
        <member name="T:Mcs.Usb.STG_DestinationEnumNet">
            <summary>
Enumerates the destination for STG downloads.
</summary>
        </member>
        <member name="T:Mcs.Usb.TcxDeviceTypeEnumNet">
            <summary>
Enumerates the type of TCX devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.SampleDstSizeNet">
            <summary>
Enumerates the destination data format for ChannelBlock functions.
</summary>
        </member>
        <member name="T:Mcs.Usb.SampleSizeNet">
            <summary>
Enumerates the data format for ChannelBlock functions.
</summary>
        </member>
        <member name="T:Mcs.Usb.DataModeEnumNet">
            <summary>
Enumerates the data mode of the device, either 16, 24 or 32 bit, can be signed or unsigned.
</summary>
        </member>
        <member name="T:Mcs.Usb.MeaLayoutEnumNet">
            <summary>
Enumerates the MEA layout of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.AdapterTypeEnumNet">
            <summary>
Enumerates the adapter type of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.DigOutStimulatorTriggerSlopeEnumNet">
            <summary>
Enumerates start/stop conditions for DigOut trigger.
</summary>
        </member>
        <member name="T:Mcs.Usb.RetriggerActionEnumNet">
            <summary>
Enumerates possible retrigger actions for STG200x devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.AnalogSourceEnumNet">
            <summary>
Enumerates the analog source of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.TriggerSourceEnumNet">
            <summary>
Enumerates the trigger source of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.W2100DigitalSourceEnumNet">
            <summary>
Enumerates the digital source of the W2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.DigitalSourceEnumNet">
            <summary>
Enumerates the digital source of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.CFirmwareDestinationNet">
            <summary>
Enumerates the destination processor for the firmware.
</summary>
        </member>
        <member name="T:Mcs.Usb.McsBusTypeEnumNet">
            <summary>
Enumerates the bus to use, either USB, PCI or any
</summary>
        </member>
        <member name="T:Mcs.Usb.ProductIdEnumNet">
            <summary>
Enumerates the group of MCS devices to connect to.
</summary>
        </member>
        <member name="T:Mcs.Usb.VendorIdEnumNet">
            <summary>
Enumerates the group of MCS devices to connect to.
</summary>
        </member>
        <member name="T:Mcs.Usb.DeviceEnumNet">
            <summary>
Enumerates the group of MCS devices to connect to.
</summary>
        </member>
    </members>
</doc>