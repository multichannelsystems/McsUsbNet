<?xml version="1.0"?>
<doc>
    <assembly>
        "McsUsbNet"
    </assembly>
    <members>
        <member name="M:Mcs.Usb.CPeristalticPumpDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CPeristalticPumpDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CPeristalticPumpDeviceNet">
            <summary>
    CPeristalticPumpDeviceNet is the class to control a Persistaltic Pump.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetThermocoupleNanovoltPerKelvin(System.UInt32,System.UInt32)">
            <summary>
 Sets the proportional constant for the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <param name="value">Proportinal constant in Nanovolt per Kelvin.</param>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetThermocoupleNanovoltPerKelvin(System.UInt32)">
            <summary>
 Gets the proportional constant for the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The proportional constant in Nanovolt per Kelvin.</returns>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetMaxP(System.UInt32)">
            <summary>
Gets the maximum heater power of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetD(System.UInt32)">
            <summary>
Gets the D-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetI(System.UInt32)">
            <summary>
Gets the I-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetP(System.UInt32)">
            <summary>
Gets the P-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetOnOff(System.UInt32)">
            <summary>
Gets if the specified channel is on or off.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetSetpoint(System.UInt32)">
            <summary>
Gets the target temperate of specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetMaxP(System.UInt32,System.Int32)">
            <summary>
Sets the maximum heater power of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetD(System.UInt32,System.Int32)">
            <summary>
Sets the D-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetI(System.UInt32,System.Int32)">
            <summary>
Sets the I-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetP(System.UInt32,System.Int32)">
            <summary>
Sets the P-coefficient of the specified device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetOnOff(System.UInt32,System.Int32)">
            <summary>
Switches the specified channel on or off.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.SetSetpoint(System.UInt32,System.Int32)">
            <summary>
Sets the target temperate of specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetBoardTemp">
            <summary>
Gets the temperate of the mainboard in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHasThermocouple">
            <summary>
Gets weather the device supports a thermocouple.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHeaterLimit(System.UInt32)">
            <summary>
Gets the temperate limit of the specified heater in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetHeaterTemp(System.UInt32)">
            <summary>
Gets the temperate of the specified heater in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetValueHires(System.UInt32)">
            <summary>
Gets the temperate of the specified channel in units of 0.01°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetValue(System.UInt32)">
            <summary>
Gets the temperate of the specified channel in units of 0.1°C.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetNumMeasureChannels">
            <summary>
Gets the number of channels the device can measure.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.GetNumControlChannels">
            <summary>
Gets the number of channels the device can control/regulate.
</summary>
        </member>
        <member name="M:Mcs.Usb.CTcxDeviceNet.#ctor">
            <summary>
Initializes a new instance of CTcxDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CTcxDeviceNet">
            <summary>
Class to control a Temperature Controller (TCX)
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet,System.Boolean)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
            <param name="listEntry">Device to use for the connection.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
            <param name="listEntry">Device to use for the connection.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.UpdateFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet,Mcs.Usb.CFirmwareDestinationNet,Mcs.Usb.OnUpdateFirmwareStatusChange,Mcs.Usb.OnUpdateFirmwareProgress,System.Boolean)">
            <summary>
Flashes a firmware file to the device.
</summary>
            <param name="FirmwareFile">Filename of the Firmware file.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.LoadUserFirmware(System.String,Mcs.Usb.CMcsUsbListEntryNet)">
            <summary>
  Send the DSP Firmware to the MEA21 device.
</summary>
            <param name="FirmwareFile">Filename of the DSP Firmware (*.bin) file.</param>
            <param name="listEntry">Device to use for the connection. See CMcsUsbListNet.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbFactoryNet.GetFirmwareVersionFromFile(System.String,System.UInt32@)">
            <summary>
Retrives version info from a Firmware update file.
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xDownloadNet.#ctor(Mcs.Usb.OnStg200xPollStatus)">
            <summary>
Use this constructor if you want to use the status callback
</summary>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeEnable(System.UInt32,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Get weather an electrode is enabled or disabled for stimulation.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="enable">1 if the electrode is enabled, 0 if it is disabled.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeEnable(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
Enabled or disables the stimulation switch for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="enable">1 to enable the electrode, 0 to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeDacMux(System.UInt32,System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the DAC which is used for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="dac">The DAC in use, can be 1, 2 or 3. If the electrode is grounded 0 is returned.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeDacMux(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
Defines the DAC to use for an electrode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="dac">The DAC to use, can be 1, 2 or 3. To ground an electrode, use 0.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.GetElectrodeMode(System.UInt32,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the mode an electrode is in.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="mode">0 for automatic and 3 for manual mode.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CStg200xBasicNet.SetElectrodeMode(System.UInt32,System.UInt32)">
            <summary>
Puts an electrode in either automatic or manual mode.
</summary>
            <param name="electrode">The electrode number.</param>
            <param name="mode">0 for automatic and 3 for manual mode.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleNanovoltPerKelvin(System.UInt32)">
            <summary>
 Reads the proportional constant for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The proportional constant in Nanovolt per Kelvin.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleCalibration(System.UInt32)">
            <summary>
 Gets the calibration constant for the Thermocouple ADC.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The calibration constant for the Thermocouple ADC.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetReferenceTemperature(System.UInt32)">
            <summary>
 Reads the reference temperature for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The temperature from the Thermocouple in 1/100 °C.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetThermocoupleTemperature(System.UInt32)">
            <summary>
Reads the temperature from Thermocouple. The functions gives the temperature difference
between both Thermocouple junctions. To get the absolute temperature, add the reference
temperature.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <returns>The temperature difference between both Thermocouple junctions in 1/100 °C.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetDigin">
            <summary>
 Reads the digital input.
</summary>
            <returns>The bit pattern of the state of the digital inputs.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetAdc(System.UInt32)">
            <summary>
 Reads an ADC Value.
</summary>
            <param name="channel">The ADC channel number to query.</param>
            <returns>The current ADC value.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetPWM(System.UInt32)">
            <summary>
 Gets the state of the PWM output.
</summary>
            <returns>The current state of the PWM outputs duty cycle in permille.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetDigout">
            <summary>
 Gets the state of the digital output.
</summary>
            <returns>The current state of the digital outputs as a bit pattern.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetSingleValve(System.UInt16)">
            <summary>
Gets the state of a valve.
</summary>
            <param name="valve">number of valve</param>
            <returns>state of the valve</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.GetValve">
            <summary>
 Gets the state of the valves.
</summary>
            <returns>The current state of the valves as a bit pattern.</returns>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetThermocoupleNanovoltPerKelvin(System.UInt32,System.UInt32)">
            <summary>
 Sets the proportinal constant for the Thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
            <param name="value">proportinal constant for the Thermocouple in Nanovolt per Kelvin.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.CalibrateThermocouple(System.UInt32)">
            <summary>
Calibrates the ADC which is used for the Thermocouple. For the calibration,
Short circuit the Thermocouple and use this function to correct a possible offset of the ADC which measures the thermocouple.
</summary>
            <param name="channel">Thermocouple channel number.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetPWM(System.UInt32,System.UInt32)">
            <summary>
 Sets the duty cycle of the PWM output.
</summary>
            <param name="channel">PWM channel number.</param>
            <param name="value">duty cycle of the PWM output in permille.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetDigout(System.UInt32)">
            <summary>
 Define the pattern on the Digital Output.
</summary>
            <param name="value">bit pattern on the digital output.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetSingleValve(System.UInt16,System.UInt16)">
            <summary>
  Opens or Closes a valve.
</summary>
            <param name="valve">number of valve to be changed.</param>
            <param name="onoff">open or close the valve.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.SetValve(System.UInt32)">
            <summary>
  Open or Close valves.
</summary>
            <param name="value">bit pattern of valves which should be open.</param>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.Dispose">
            <summary>
    Default destructor.
</summary>
        </member>
        <member name="M:Mcs.Usb.CFluidControlDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CFluidControlDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CFluidControlDeviceNet">
            <summary>
    CFluidControlDeviceNet is the class to control MCS FluidControl (FCB and FCX) device.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.DacqDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CMcsUsbDacqNet" />. Use this to control the data aquisition.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.FluidControlDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CFluidControlDeviceNet" />. Use this to control the valves. Only SetSingleValve is implemented for <see cref="T:Mcs.Usb.CSafeISDeviceNet" />.
</summary>
        </member>
        <member name="P:Mcs.Usb.CSafeISDeviceNet.RoboDevice">
            <summary>
Gets the <see cref="T:Mcs.Usb.CRoboDeviceNet" />. Use this to control the syringe.
</summary>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacPeriode(System.UInt32)">
            <summary>
Sets the DAC periode.
</summary>
            <param name="periode">The periode in units of 10µs.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacPulseform(System.Int16[])">
            <summary>
Sets the DAC pulseform.
</summary>
            <param name="pulseform">The pulseform.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetDacMode(System.Byte)">
            <summary>
Sets the DAC mode.
</summary>
            <param name="mode">The mode: 0 = Impedance ; 1 = Amperometry</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetAdcSamplePos(System.UInt16[])">
            <summary>
Sets the sample position of the ADC.
</summary>
            <param name="positions">The positions in units of 0.1µs.</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetAdcChannels(System.Byte)">
            <summary>
Sets the ADC channels you want to be sampled
</summary>
            <param name="channels">The bitmap of the 8 channels. Set bit to 1 for the channels you want measure</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.SetSwitches(System.UInt16)">
            <summary>
Sets the switches for all electrodes on the device. Do not use during measurement
</summary>
            <param name="switches">The switches: See Schematics for the meaning</param>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.Dispose">
            <summary>
Releases unmanaged resources and performs other cleanup operations before the
<see cref="T:Mcs.Usb.CSafeISDeviceNet" /> is reclaimed by garbage collection.
</summary>
        </member>
        <member name="M:Mcs.Usb.CSafeISDeviceNet.#ctor">
            <summary>
Initializes a new instance of the <see cref="T:Mcs.Usb.CSafeISDeviceNet" /> class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CSafeISDeviceNet">
            <summary />
        </member>
        <member name="M:Mcs.Usb.CGilsonDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CGilsonDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CGilsonDeviceNet">
            <summary>
    CGilsonDeviceNet is the class to control a Gilson device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaUSBDeviceNet.#ctor">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaUSBDeviceNet.#ctor(Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="channelData">Handler to call when new data is available.</param>
            <param name="error">Handler to call when an error occurs.</param>
        </member>
        <member name="T:Mcs.Usb.CMeaUSBDeviceNet">
            <summary>
Class for data acquisition via ME and MEA USB amplifiers
</summary>
        </member>
        <member name="M:Mcs.Usb.CMC_CardDeviceNet.#ctor">
            <summary>
Initializes a new instance of CMC_CardDeviceNet class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMC_CardDeviceNet.#ctor(Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMC_CardDeviceNet class.
</summary>
            <param name="channelData">Handler to call when new data is available.</param>
            <param name="error">Handler to call when an error occurs.</param>
        </member>
        <member name="T:Mcs.Usb.CMC_CardDeviceNet">
            <summary>
Class for data acquisition via MC_Card
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetTriggerMaskValue(System.UInt32,System.UInt32)">
            <summary>
Defines a pattern on the digital dataword which will start a trigger when found.
</summary>
            <param name="mask">Bits in the digital dataword which are monitored for a match with value.</param>
            <param name="value">Pattern which must match for the trigger to start.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetTriggerPeriod(System.Int32)">
            <summary>
Sets the maximum number of samples per trigger.
</summary>
            <param name="samples">Number of samples to acquire after the trigger condition is met.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[]@,System.UInt32)">
            <summary>
Gets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which contains the electrode (channel) and amplification on return.</param>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[]@)">
            <summary>
Gets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which contains the electrode (channel) and amplification on return.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[],System.UInt32)">
            <summary>
Sets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which defines the electrode (channel) and amplification.</param>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetAudioChannels(Mcs.Usb.CMeaDeviceNet.s_setaudionet[])">
            <summary>
Sets the electrode to monitor and amplification for the audio channels.
</summary>
            <param name="channels">Struct which defines the electrode (channel) and amplification.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetNumberOfAudioChannels">
            <summary>
Gets the number of available audio channels.
</summary>
            <returns>The number of audio channels available, 0 when there are none.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetNumberOfAnalogChannels(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Sets the number of analog channels in the datastream for the MEA2100 device.
</summary>
            <param name="NumberOfChannels_HS1">Number of analog channels from the Headstage 1.</param>
            <param name="NumberOfChannels_HS2">Number of analog channels from the Headstage 2.</param>
            <param name="NumberOfChannels_DSP">Number of data words from the DSP.</param>
            <param name="NumberOfChannels_IF">Number of analog channels from the Interfaceboard.</param>
            <param name="VirtualDevice">VirtualDevice to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetNumberOfChannels(System.Int32)">
            <summary>
Sets the number of analog channels in the datastream.
</summary>
            <param name="NumberOfChannels">Number of analog channels.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.SetDigitalOut(System.UInt32,System.Int32,System.Int32)">
            <summary>
Generate a pulse on the digital output.
</summary>
            <param name="digout_value">Bitmask to set on the digital out.</param>
            <param name="pulselength">Pulselength in ms.</param>
            <param name="counter_index">Counter to use for MEA2100.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableChecksum(System.Boolean)">
            <summary>
Enable the checksum data word in the datastream. The checksum is a 32 bit counter and 2x16 bit magic numbers.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableTimestamp(System.Boolean)">
            <summary>
Enable the timestamp data word in the datastream. The timestamp is a 64 bit counter.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.EnableDigitalIn(System.Boolean)">
            <summary>
Enable the digital data word in the datastream.
</summary>
            <param name="enable">True to enable, False to disable.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="P:Mcs.Usb.CMeaDeviceNet.Gain">
            <summary>
The amplifier gain of the device. Value is gain times 1000, a value of 1000 corresponds to a gain of 1.0.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.GetGain(System.Int32@)">
            <summary>
Gets the amplifier gain of the device.
</summary>
            <param name="gain">Gain times 1000, a value of 1000 corresponds to a gain of 1.0.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.#ctor(Mcs.Usb.McsBusTypeEnumNet,Mcs.Usb.OnChannelData,Mcs.Usb.OnError)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
            <param name="channelData">Callback to call when new data is available.</param>
            <param name="error">Callback to call when an error occurred.</param>
        </member>
        <member name="M:Mcs.Usb.CMeaDeviceNet.#ctor(Mcs.Usb.McsBusTypeEnumNet)">
            <summary>
Initializes a new instance of CMeaDeviceNet class.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
        </member>
        <member name="T:Mcs.Usb.CMeaDeviceNet">
            <summary>
Base class for MEA data acquisition devices.
</summary>
            <remarks>
There are two different device types for MEA data aquistion devices. There are the USB-MEA devices
and the MC_Card. In .NET both classes can be accessed by the contructor of the base class CMeaDeviceNet,
which contructs the correct underlying C++ class for the USB-MEA device on the one hand or the MC_Card device 
on the other hand.
Through this interface both device types USB-MEA devices and MC_Card devices can be accessed
</remarks>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="queue">Handle of the queue.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of data from the device.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.IsDigitalChannelDedicated">
            <summary>
Query if the digital channel replaces an analog channel when enabled (e.g. on MC_Card) or adds a channel link on USB devices.
</summary>
            <returns>false when the digital channel replaces an analog channel when enabled, true when the digital channels is appended to the analog channels when enabled.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.GetNumberOfHWDigitalChannels(System.Int32@)">
            <summary>
Get the number of digital channels the device supports.
</summary>
            <param name="numberOfChannels">Number of digital channels the device supports.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.CHWInfo.GetNumberOfHWADCChannels(System.Int32@)">
            <summary>
Get the number of analog channels the device supports.
</summary>
            <param name="numberOfChannels">Number of analog channels the device supports.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbDacqNet.CHWInfo">
            <summary>
Class to provide hardware information about the device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint32_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of int16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesDictUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format, that contains subqueues,
each populates an entry in the dictionary by hardware channel number
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedChannelsQueue call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Dictonary of uint16_t arrays and hardware channel as key.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint32_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of int16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadAsFrameArrayUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue as array of uint16_t data frame arrays
</summary>
            <param name="handle">Handle of the FIFO queue. Zero when the SetSelectedData call was used.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of uint16_t frame arrays.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI32(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint32_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int16[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in int16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.UInt16[],System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="buffer">Buffer to put the data from the device in.</param>
            <param name="frames_pos">Position in buffer where to put the data.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_ReadFramesUI16(System.Int32,System.Int32,System.Int32@)">
            <summary>
Read data from a FIFO queue in uint16_t data format
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <param name="frames">Number of sample frames to read.</param>
            <param name="frames_ret">Number of sample frames which were read, might be smaller than frames.</param>
            <returns>Array of data from the device.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.ChannelBlock_AvailFrames(System.Int32)">
            <summary>
Get the number of sample frames already available in the FIFO.
</summary>
            <param name="handle">Handle of the FIFO queue. Either zero when the SetSelectedData call was used or the channel number.</param>
            <returns>Number of sample frames available in the FIFO.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannelsQueue(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannelsQueue(System.Int32,System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Data in callback will be a list per channel. Use ChannelBlock_ReadFramesDict... with handle = 0 to read the data.
</summary>
            <summary>
Create a common queue for all channels.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedData(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Use handle = 0 in the ChannelBlock_ReadFrames... functions.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedData(System.Int32,System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a common FIFO queue for all channels. Use handle = 0 in the ChannelBlock_ReadFrames... functions.
</summary>
            <remarks>
When using 32 bit data format, ChannelsInBlock is still the number of 16 bit channels per frame, as obtained 
from GetChannelsInBlock, while nChannels is the number of 32 bit channels to be read from the device.
So when all channels from a device are read in 32 bit data format nChannels = ChannelsInBlock/2
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannels(System.Boolean[],System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a FIFO queue per channel. Each channel will have its own FIFO and Callback function.
</summary>
            <remarks>
When using a 32bit sample size, the number obtained from GetChannelsInBlock must be devided by 2 to be used here,
since GetChannelsInBlock returns the number of 16 bit datapoints per sample frame, while this functions uses
the number of sample frames in its own data format.
</remarks>
            <param name="selectedChannels">List of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of sample frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSelectedChannels(System.Int32,System.Int32,System.Int32,Mcs.Usb.CMcsUsbDacqNet.SampleSize,System.Int32)">
            <summary>
Create a FIFO queue per channel. Each channel will have its own FIFO and Callback function.
</summary>
            <remarks>
When using a 32bit sample size, the number obtained from GetChannelsInBlock must be devided by 2 to be used here,
since GetChannelsInBlock returns the number of 16 bit datapoints per sample frame, while this functions uses
the number of sample frames in its own data format.
</remarks>
            <param name="nChannels">Number of channels to be collected in the FIFO.</param>
            <param name="queuesize">Size of sample frames the FIFO can hold.</param>
            <param name="threshold">Number of samples frames the FIFO must acquire before the callback function is called.</param>
            <param name="samplesize">size of the datawords, either 16 or 32bit.</param>
            <param name="ChannelsInBlock">value obtained from GetChannelsInBlock.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StopDacq">
            <summary>
Stop the data acquisition thread.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="samples_per_callback">Obsolete, do not use.</param>
            <param name="timeout">Timeout in ms.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
            <param name="packetsInUrb">Packets in each URB.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="samples_per_callback">Obsolete, do not use.</param>
            <param name="timeout">Timeout in ms.</param>
            <param name="numUsbBuffers">Number of USB Buffers to use.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.UInt32,System.UInt32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="samples_per_callback">Obsolete, do not use.</param>
            <param name="timeout">Timeout in ms.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq(System.UInt32)">
            <summary>
Start the data acquisition thread.
</summary>
            <param name="samples_per_callback">Obsolete, do not use.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.StartDacq">
            <summary>
Start the data acquisition thread.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetChannelsInBlock(System.Int32@)">
            <summary>
Get the number of 16 bit datawords which will be collected per sample frame, use after the device is configured.
</summary>
            <param name="ChannelsInBlock">Number of 16 bit datawords per sample frame.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetMaxSamplingFrequency">
            <summary>
Gets the maximal sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.set_SampleRate(System.Int32)">
            <summary>
Sets the sampling frequency of the device.
</summary>
            <param name="rate">Sampling frequency in Hz.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.get_SampleRate">
            <summary>
Gets the sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbDacqNet.SampleRate">
            <summary>
The sampling frequency of the device in Hz.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetSampleRate(System.Int32@)">
            <summary>
Gets the sampling frequency of the device.
</summary>
            <returns>Sampling frequency in Hz.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetSampleRate(System.Int32)">
            <summary>
Sets the sampling frequency of the device.
</summary>
            <param name="rate">Sampling frequency in Hz.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetAdcDataFormat(System.Int32@)">
            <summary>
Gets the ADC data format, 16 means 16 bits, 24 means 24 bits, 32 means 32 bits.
</summary>
            <returns>The data format in bits.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetMeaLayout(Mcs.Usb.MeaLayoutEnumNet@)">
            <summary>
Gets the MEA layout which is connected to the MEA2100 device.
</summary>
            <param name="mea_layout">MeaLayoutEnumNet which enumerates the MEA types.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetAdapterType(Mcs.Usb.AdapterTypeEnumNet@)">
            <summary>
Gets the adapter which is connected to the MEA2100 device.
</summary>
            <param name="adapter_type">AdapterTypeEnumNet which enumerates the possible adapters.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetDataMode(Mcs.Usb.DataModeEnumNet@,System.UInt32)">
            <summary>
Gets the data mode, can be 16, 24 or 32bit, all signed or unsigned on the MEA2100 device.
</summary>
            <param name="DataMode">DataModeEnumNet enumerates the possible data modes.</param>
            <param name="VirtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetDataMode(Mcs.Usb.DataModeEnumNet,System.UInt32)">
            <summary>
Sets the data mode, can be 16, 24 or 32bit, all signed or unsigned on the MEA2100 device.
</summary>
            <param name="dataMode">DataModeEnumNet enumerates the possible data modes.</param>
            <param name="virtualDevice">Virtual device to use.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetVoltageRangeInMilliVolt(System.Int32@)">
            <summary>
Gets the currently selected voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="VoltageRange">The rounded Voltage Range in mV.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.GetVoltageRangeInMicroVolt(System.Int32@)">
            <summary>
Gets the currently selected voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="VoltageRange">Voltage Range in uV.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetVoltageRangeInMicroVolt(System.Int32)">
            <summary>
Sets the voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="voltageRange">Voltage Range to use in µV.</param>
            <remarks>This replaces SetVoltageRange, where the value of the range was in mV!</remarks>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbDacqNet.SetVoltageRangeByIndex(System.Int32,System.UInt32)">
            <summary>
Sets the voltage range on devices which support multiple voltage ranges.
</summary>
            <param name="voltageRangeIndex">Voltage Range to use as index, smaller values are larger voltage ranges.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="T:Mcs.Usb.CMeasureTableDeviceNet">
            <summary>
CMeasureTableDeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CPPSDeviceNet">
            <summary>
CPPS4plus1DeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CHLADeviceNet">
            <summary>
CHLADeviceNet is the to control the MCS HLA device
</summary>
        </member>
        <member name="T:Mcs.Usb.CEncapsulatorDeviceNet">
            <summary>
CEncapsulatorDeviceNet is the to control the MCS HiClamp device
</summary>
        </member>
        <member name="T:Mcs.Usb.CHiClampDeviceNet">
            <summary>
CHiClampDeviceNet is the to control the MCS HiClamp device
</summary>
        </member>
        <member name="T:Mcs.Usb.CRoboInjectDeviceNet">
            <summary>
CRoboInjectDeviceNet is the to control the MCS RoboInject device
</summary>
        </member>
        <member name="T:Mcs.Usb.CRoboocyte2DeviceNet">
            <summary>
CRoboocyte2DeviceNet is the class to control the MCS Roboocyte2 device
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetCurrentPosition(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32@,System.Int32@)">
            <summary>
Gets the current position of motors
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="x"> Current position of first axis if pattern in axes is set </param>
            <param name="y"> Current position of second axis if pattern in axes is set </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.StopMovement(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">
            <summary>
Stops the current movement
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.MoveAbs(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32,System.Int32,System.Int32)">
            <summary>
Moves the motor to the new absolute position
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="x"> Position of first axis, if pattern in axes is set </param>
            <param name="y"> Position of second axis if pattern in axes is set </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.FindReference(System.Byte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">
            <summary>
Searches the reference position of the motor
</summary>
            <param name="busaddress"> Address of the McsBus </param>
            <param name="axes"> Bit pattern of axes to drive </param>
            <param name="timeout"> Timeout of maximal waiting for the end of the command (-1 is forever) </param>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetMovementError">
            <summary>
Low level command, gets the error of the last movement end
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.GetInMovement">
            <summary>
Low level command, gets the internal state "In Movement"
</summary>
        </member>
        <member name="M:Mcs.Usb.CRoboDeviceNet.SetInMovement">
            <summary>
Low level command, sets the internal state to "In Movement" 
</summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_I">
            <summary> Bit pattern for i axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_Z">
            <summary> Bit pattern for z axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_Y">
            <summary> Bit pattern for y axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axes_X">
            <summary> Bit pattern for x axis for axes argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_I">
            <summary> Axis number of i for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_Z">
            <summary> Axis number of z for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_Y">
            <summary> Axis number of y for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.Axis_X">
            <summary> Axis number of x for axis argument </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.McsBus_ZI">
            <summary> McsBus address for the z and i axes </summary>
        </member>
        <member name="F:Mcs.Usb.CRoboDeviceNet.McsBus_XY">
            <summary> McsBus address for the xy-plane </summary>
        </member>
        <member name="T:Mcs.Usb.CRoboDeviceNet">
            <summary>
CRoboDeviceNet is the base class for all Robo platform based devices
</summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetIntBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type int from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUIntBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned int from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetShortBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type short from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUShortBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned short from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetByteBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type char from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.GetUByteBuffer(System.UInt16,System.UInt16,System.Int32)">
            <summary>
Gets an array of type unsigned char from the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="Size">The size of the array.</param><returns>The array of data from the device.</returns></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetIntBuffer(System.UInt16,System.UInt16,System.Int32[])">
            <summary>
Sends an array of type int to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUIntBuffer(System.UInt16,System.UInt16,System.UInt32[])">
            <summary>
Sends an array of unsigned int to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetShortBuffer(System.UInt16,System.UInt16,System.Int16[])">
            <summary>
Sends an array of type short to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUShortBuffer(System.UInt16,System.UInt16,System.UInt16[])">
            <summary>
Sends an array of type unsigned short to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetByteBuffer(System.UInt16,System.UInt16,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte[])">
            <summary>
Sends an array of type char to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetUByteBuffer(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
Sends an array of type unsigned char to the device.
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param><param name="buffer">The buffer to send.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.SetValue(System.UInt16,System.UInt16)">
            <summary>
Sets .
<param name="Value">The value of the request.</param><param name="Index">The index of the request.</param></summary>
        </member>
        <member name="M:Mcs.Usb.CGenericDevelopDeviceNet.#ctor">
            <summary>
    Initialize a new instance of the CGenericDevelopDeviceNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CGenericDevelopDeviceNet">
            <summary>
    CGenericDevelopDeviceNet is the class to use during development of a new device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetDeviceSpeed">
            <summary>
  Query the Connection Speed of the device.
</summary>
            <returns>0 for Low-Speed, 1 for Full-Speed, 2 for High-Speed and 3 for SuperSpeed.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.GetSerialNumber">
            <summary>
  Query the Serial Number of the device.
</summary>
            <returns>The Serial Number.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Disconnect">
            <summary>
  Disconnect from a device.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.IsConnected">
            <summary>
  Check if a device is Connected.
</summary>
            <returns>true if the device is connected.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceEnumNet,Mcs.Usb.DeviceIdNet,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="McsUsbDevice">The Mcs Device type.</param>
            <param name="myDeviceId">The device ID.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceEnumNet,Mcs.Usb.DeviceIdNet)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="McsUsbDevice">The Mcs Device type.</param>
            <param name="myDeviceId">The device ID.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceIdNet,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="myDeviceId">The device ID.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceIdNet)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="myDeviceId">The device ID.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceEnumNet,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="McsUsbDevice">The Mcs Device type.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,Mcs.Usb.DeviceEnumNet)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="McsUsbDevice">The Mcs Device type.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(System.String)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="serNo">The Serial Number of the device to connect.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(Mcs.Usb.CMcsUsbListEntryNet,System.UInt32)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="entry">The Device List Entry for the device to be connected.</param>
            <param name="LockMask">The Lock Mask for this connection.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect(Mcs.Usb.CMcsUsbListEntryNet)">
            <summary>
  Opens a connection to the device.
</summary>
            <param name="entry">The Device List Entry for the device to be connected.</param>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.Connect">
            <summary>
  Opens a connection to the device.
</summary>
            <returns>Error Status. 0 on success.</returns>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.#ctor(Mcs.Usb.McsBusTypeEnumNet)">
            <summary>
Initializes a new instance of the base class to handle MCS USB devices.
</summary>
            <param name="bustype">Type of device to use, either USB or PCI.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbNet.#ctor">
            <summary>
Initializes a new instance of the base class to handle MCS USB devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbNet">
            <summary>
Base class to handle MCS USB devices.
All device classes are derived from this class. Functionality that is provided by all MCS devices is handled by this class.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetUsbListEntries">
            <summary>
Returns all entries from the list of USB Devices connected to the computer.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetUsbListEntry(System.UInt32)">
            <summary>
Returns one CMcsUsbListEntryNet from the list of USB Devices connected to the computer.
</summary>
            <param name="index">number of the entry to use.</param>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListNet.Count">
            <summary>
Gets the number of devices currently in the list.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.GetNumberOfDevices">
            <summary>
Gets the number of devices currently in the list.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.SetStringFormat(System.String)">
            <summary>
Specify the text the CMcsUsbListEntryNet.ToString() function should return. The 
special code %N expands to the device name and %S expands to the serial number of the device.
</summary>
            <param name="format">A String containing the format template. Default is "%N (%S)".</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Initialize(Mcs.Usb.DeviceIdNet[])">
            <summary>
Initialize/Update the list of devices which are currently connected to the computer.
</summary>
            <param name="DeviceIdList">Specifies a list of devices to look for.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Initialize(Mcs.Usb.DeviceEnumNet)">
            <summary>
Initialize/Update the list of devices which are currently connected to the computer.
</summary>
            <param name="McsUsbDevice">Specifies the type of devices to look for.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.#ctor(Mcs.Usb.OnDeviceArrivalRemoval,Mcs.Usb.OnDeviceArrivalRemoval)">
            <summary>
Initializes a new instance of CMcsUsbListNet class.
</summary>
            <param name="devArrival">Callback to call when a new device is attached to the bus.</param>
            <param name="devRemoval">Callback to call when a device is removed from the bus.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListNet.#ctor">
            <summary>
Initializes a new instance of CMcsUsbListNet class.
</summary>
        </member>
        <member name="T:Mcs.Usb.CMcsUsbListNet">
            <summary>
Class to handle a list of connected MCS USB devices.
</summary>
        </member>
        <member name="T:Mcs.Usb.OnDeviceArrivalRemoval">
            <summary>
Delegate to show a device arrival or removal.
</summary>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.SetStringFormat(System.String)">
            <summary>
Specify the text the CMcsUsbListEntryNet.ToString() function should return. The 
special code %N expands to the device name and %S expands to the serial number of the device.
</summary>
            <param name="format">A String containing the format template. Default is "%N (%S)".</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.Equals(System.Object)">
            <summary>
Checks weather two CMcsUsbListEntryNet represent the same USB device.
</summary>
            <param name="obj">The CMcsUsbListEntryNet to compare with.</param>
        </member>
        <member name="M:Mcs.Usb.CMcsUsbListEntryNet.#ctor">
            <summary>
Initializes a new instance of the CMcsUsbListEntryNet class.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.DevicePath">
            <summary>
The DevicePath of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.HwVersion">
            <summary>
The hardware revision of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.SerialNumber">
            <summary>
The serial number of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.DeviceName">
            <summary>
The device name of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.Product">
            <summary>
The Product ID of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="P:Mcs.Usb.CMcsUsbListEntryNet.Manufacturer">
            <summary>
The Manufacturer ID of the device represented by this CMcsUsbListEntryNet.
</summary>
        </member>
        <member name="T:Mcs.Usb.DataModeEnumNet">
            <summary>
Enumerates the data mode of the device, either 16, 24 or 32 bit, can be signed or unsigned.
</summary>
        </member>
        <member name="T:Mcs.Usb.MeaLayoutEnumNet">
            <summary>
Enumerates the MEA layout of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.AdapterTypeEnumNet">
            <summary>
Enumerates the adapter type of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.TriggerSourceEnumNet">
            <summary>
Enumerates the trigger source of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.DigitalSourceEnumNet">
            <summary>
Enumerates the digital source of the MEA2100 device.
</summary>
        </member>
        <member name="T:Mcs.Usb.CFirmwareDestinationNet">
            <summary>
Enumerates the destination processor for the firmware.
</summary>
        </member>
        <member name="T:Mcs.Usb.McsBusTypeEnumNet">
            <summary>
Enumerates the bus to use, either USB, PCI or any
</summary>
        </member>
        <member name="T:Mcs.Usb.DeviceEnumNet">
            <summary>
Enumerates the group of MCS devices to connect to.
</summary>
        </member>
    </members>
</doc>